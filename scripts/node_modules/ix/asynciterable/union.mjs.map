{"version":3,"sources":["asynciterable/union.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAErD,MAAM,OAAO,kBAA4B,SAAQ,cAAuB;IAKtE,YACE,IAA4B,EAC5B,KAA6B,EAC7B,QAAgE;QAEhE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,GAAG,GAAG,EAAe,CAAC;QAC1B,IAAI,KAAK,EAAE,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE;YAClC,IAAI,CAAC,MAAM,iBAAiB,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;gBAChE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChB,MAAM,KAAK,CAAC;aACb;SACF;QAED,IAAI,KAAK,EAAE,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;YACnC,IAAI,CAAC,MAAM,iBAAiB,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;gBAChE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChB,MAAM,KAAK,CAAC;aACb;SACF;IACH,CAAC;CACF;AAED,MAAM,UAAU,KAAK,CACnB,IAA4B,EAC5B,KAA6B,EAC7B,WAAmE,aAAa;IAEhF,OAAO,IAAI,kBAAkB,CAAU,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AAChE,CAAC","file":"union.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { arrayIndexOfAsync } from '../internal/arrayindexof';\nimport { comparerAsync } from '../internal/comparer';\n\nexport class UnionAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _left: AsyncIterable<TSource>;\n  private _right: AsyncIterable<TSource>;\n  private _comparer: (x: TSource, y: TSource) => boolean | Promise<boolean>;\n\n  constructor(\n    left: AsyncIterable<TSource>,\n    right: AsyncIterable<TSource>,\n    comparer: (x: TSource, y: TSource) => boolean | Promise<boolean>\n  ) {\n    super();\n    this._left = left;\n    this._right = right;\n    this._comparer = comparer;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let map = [] as TSource[];\n    for await (let lItem of this._left) {\n      if ((await arrayIndexOfAsync(map, lItem, this._comparer)) === -1) {\n        map.push(lItem);\n        yield lItem;\n      }\n    }\n\n    for await (let rItem of this._right) {\n      if ((await arrayIndexOfAsync(map, rItem, this._comparer)) === -1) {\n        map.push(rItem);\n        yield rItem;\n      }\n    }\n  }\n}\n\nexport function union<TSource>(\n  left: AsyncIterable<TSource>,\n  right: AsyncIterable<TSource>,\n  comparer: (x: TSource, y: TSource) => boolean | Promise<boolean> = comparerAsync\n): AsyncIterableX<TSource> {\n  return new UnionAsyncIterable<TSource>(left, right, comparer);\n}\n"]}