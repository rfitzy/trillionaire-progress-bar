"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asynciterablex_1 = require("./asynciterablex");
const identity_1 = require("../internal/identity");
const comparer_1 = require("../internal/comparer");
class DistinctUntilChangedAsyncIterable extends asynciterablex_1.AsyncIterableX {
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    async *[Symbol.asyncIterator]() {
        let currentKey, hasCurrentKey = false;
        for await (let item of this._source) {
            let key = await this._keySelector(item);
            let comparerEquals = false;
            if (hasCurrentKey) {
                comparerEquals = await this._comparer(currentKey, key);
            }
            if (!hasCurrentKey || !comparerEquals) {
                hasCurrentKey = true;
                currentKey = key;
                yield item;
            }
        }
    }
}
exports.DistinctUntilChangedAsyncIterable = DistinctUntilChangedAsyncIterable;
function distinctUntilChanged(source, keySelector = identity_1.identityAsync, comparer = comparer_1.comparerAsync) {
    return new DistinctUntilChangedAsyncIterable(source, keySelector, comparer);
}
exports.distinctUntilChanged = distinctUntilChanged;

//# sourceMappingURL=distinctuntilchanged.js.map
