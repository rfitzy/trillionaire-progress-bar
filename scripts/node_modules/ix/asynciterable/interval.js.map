{"version":3,"sources":["asynciterable/interval.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAClD,qCAAiC;AAEjC,MAAM,qBAAsB,SAAQ,+BAAsB;IAGxD,YAAY,OAAe;QACzB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,CAAC,EAAE;YACR,MAAM,cAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3B,MAAM,CAAC,EAAE,CAAC;SACX;IACH,CAAC;CACF;AAED,SAAgB,QAAQ,CAAC,OAAe;IACtC,OAAO,IAAI,qBAAqB,CAAC,OAAO,CAAC,CAAC;AAC5C,CAAC;AAFD,4BAEC","file":"interval.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { sleep } from './_sleep';\n\nclass IntervalAsyncIterable extends AsyncIterableX<number> {\n  private _dueTime: number;\n\n  constructor(dueTime: number) {\n    super();\n    this._dueTime = dueTime;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let i = 0;\n    while (1) {\n      await sleep(this._dueTime);\n      yield i++;\n    }\n  }\n}\n\nexport function interval(dueTime: number): AsyncIterableX<number> {\n  return new IntervalAsyncIterable(dueTime);\n}\n"]}