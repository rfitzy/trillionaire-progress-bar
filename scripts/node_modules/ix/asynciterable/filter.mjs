import { AsyncIterableX } from './asynciterablex';
import { bindCallback } from '../internal/bindcallback';
export class FilterAsyncIterable extends AsyncIterableX {
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    async *[Symbol.asyncIterator]() {
        let i = 0;
        for await (let item of this._source) {
            if (await this._predicate(item, i++)) {
                yield item;
            }
        }
    }
}
export function filter(source, predicate, thisArg) {
    return new FilterAsyncIterable(source, bindCallback(predicate, thisArg, 2));
}

//# sourceMappingURL=filter.mjs.map
