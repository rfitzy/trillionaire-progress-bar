import { AsyncIterableX } from './asynciterablex';
import { isAsyncIterable } from '../internal/isiterable';
export class FlattenAsyncIterable extends AsyncIterableX {
    constructor(source, depth) {
        super();
        this._source = source;
        this._depth = depth;
    }
    async *_flatten(source, depth) {
        if (depth === 0) {
            for await (let item of source) {
                yield item;
            }
            return undefined;
        }
        for await (let item of source) {
            if (isAsyncIterable(item)) {
                for await (let innerItem of this._flatten(item, depth - 1)) {
                    yield innerItem;
                }
            }
            else {
                yield item;
            }
        }
    }
    [Symbol.asyncIterator]() {
        return this._flatten(this._source, this._depth)[Symbol.asyncIterator]();
    }
}
export function flatten(source, depth = Infinity) {
    return new FlattenAsyncIterable(source, depth);
}

//# sourceMappingURL=flatten.mjs.map
