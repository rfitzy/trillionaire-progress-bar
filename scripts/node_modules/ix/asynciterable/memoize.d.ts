import { AsyncIterableX } from './asynciterablex';
import { IRefCountList } from '../iterable/_refcountlist';
export declare class MemoizeAsyncBuffer<T> extends AsyncIterableX<T> {
    protected _source: AsyncIterator<T>;
    protected _buffer: IRefCountList<T>;
    protected _shared: Promise<IteratorResult<T>> | null;
    protected _error: any;
    protected _stopped: boolean;
    constructor(source: AsyncIterator<T>, buffer: IRefCountList<T>);
    [Symbol.asyncIterator](): AsyncIterableIterator<T>;
    protected _getIterable(offset?: number): AsyncIterableIterator<T>;
}
export declare function memoize<TSource>(source: AsyncIterable<TSource>, readerCount?: number): AsyncIterableX<TSource>;
export declare function memoize<TSource, TResult>(source: AsyncIterable<TSource>, readerCount?: number, selector?: (value: AsyncIterable<TSource>) => AsyncIterable<TResult>): AsyncIterableX<TResult>;
