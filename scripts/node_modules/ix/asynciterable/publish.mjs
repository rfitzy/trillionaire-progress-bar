import { create } from './create';
import { MemoizeAsyncBuffer } from './memoize';
import { RefCountList } from '../iterable/_refcountlist';
class PublishedAsyncBuffer extends MemoizeAsyncBuffer {
    constructor(source) {
        super(source, new RefCountList(0));
    }
    [Symbol.asyncIterator]() {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.asyncIterator]();
    }
}
export function publish(source, selector) {
    return selector
        ? create(async () => selector(publish(source))[Symbol.asyncIterator]())
        : new PublishedAsyncBuffer(source[Symbol.asyncIterator]());
}

//# sourceMappingURL=publish.mjs.map
