import { AsyncIterableX } from './asynciterablex';
import { identityAsync } from '../internal/identity';
import { comparerAsync } from '../internal/comparer';
export class DistinctUntilChangedAsyncIterable extends AsyncIterableX {
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    async *[Symbol.asyncIterator]() {
        let currentKey, hasCurrentKey = false;
        for await (let item of this._source) {
            let key = await this._keySelector(item);
            let comparerEquals = false;
            if (hasCurrentKey) {
                comparerEquals = await this._comparer(currentKey, key);
            }
            if (!hasCurrentKey || !comparerEquals) {
                hasCurrentKey = true;
                currentKey = key;
                yield item;
            }
        }
    }
}
export function distinctUntilChanged(source, keySelector = identityAsync, comparer = comparerAsync) {
    return new DistinctUntilChangedAsyncIterable(source, keySelector, comparer);
}

//# sourceMappingURL=distinctuntilchanged.mjs.map
