{"version":3,"sources":["asynciterable/except.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAErD,MAAM,OAAO,mBAA6B,SAAQ,cAAuB;IAKvE,YACE,KAA6B,EAC7B,MAA8B,EAC9B,QAAgE;QAEhE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,GAAG,GAAG,EAAe,CAAC;QAC1B,IAAI,KAAK,EAAE,IAAI,UAAU,IAAI,IAAI,CAAC,OAAO,EAAE;YACzC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACtB;QAED,IAAI,KAAK,EAAE,IAAI,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE;YACvC,IAAI,CAAC,MAAM,iBAAiB,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;gBACpE,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACpB,MAAM,SAAS,CAAC;aACjB;SACF;IACH,CAAC;CACF;AAED,MAAM,UAAU,MAAM,CACpB,KAA6B,EAC7B,MAA8B,EAC9B,WAAmE,aAAa;IAEhF,OAAO,IAAI,mBAAmB,CAAU,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;AACnE,CAAC","file":"except.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { arrayIndexOfAsync } from '../internal/arrayindexof';\nimport { comparerAsync } from '../internal/comparer';\n\nexport class ExceptAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _first: AsyncIterable<TSource>;\n  private _second: AsyncIterable<TSource>;\n  private _comparer: (x: TSource, y: TSource) => boolean | Promise<boolean>;\n\n  constructor(\n    first: AsyncIterable<TSource>,\n    second: AsyncIterable<TSource>,\n    comparer: (x: TSource, y: TSource) => boolean | Promise<boolean>\n  ) {\n    super();\n    this._first = first;\n    this._second = second;\n    this._comparer = comparer;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let map = [] as TSource[];\n    for await (let secondItem of this._second) {\n      map.push(secondItem);\n    }\n\n    for await (let firstItem of this._first) {\n      if ((await arrayIndexOfAsync(map, firstItem, this._comparer)) === -1) {\n        map.push(firstItem);\n        yield firstItem;\n      }\n    }\n  }\n}\n\nexport function except<TSource>(\n  first: AsyncIterable<TSource>,\n  second: AsyncIterable<TSource>,\n  comparer: (x: TSource, y: TSource) => boolean | Promise<boolean> = comparerAsync\n): AsyncIterableX<TSource> {\n  return new ExceptAsyncIterable<TSource>(first, second, comparer);\n}\n"]}