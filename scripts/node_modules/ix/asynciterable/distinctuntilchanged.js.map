{"version":3,"sources":["asynciterable/distinctuntilchanged.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAClD,mDAAqD;AACrD,mDAAqD;AAErD,MAAa,iCAAiD,SAAQ,+BAAuB;IAK3F,YACE,MAA8B,EAC9B,WAAqD,EACrD,QAAmE;QAEnE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,UAA4B,EAC9B,aAAa,GAAG,KAAK,CAAC;QACxB,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YACnC,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACxC,IAAI,cAAc,GAAG,KAAK,CAAC;YAC3B,IAAI,aAAa,EAAE;gBACjB,cAAc,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,UAAW,EAAE,GAAG,CAAC,CAAC;aACzD;YACD,IAAI,CAAC,aAAa,IAAI,CAAC,cAAc,EAAE;gBACrC,aAAa,GAAG,IAAI,CAAC;gBACrB,UAAU,GAAG,GAAG,CAAC;gBACjB,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AAhCD,8EAgCC;AAED,SAAgB,oBAAoB,CAClC,MAA8B,EAC9B,cAAwD,wBAAa,EACrE,WAAsE,wBAAa;IAEnF,OAAO,IAAI,iCAAiC,CAAgB,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;AAC7F,CAAC;AAND,oDAMC","file":"distinctuntilchanged.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { identityAsync } from '../internal/identity';\nimport { comparerAsync } from '../internal/comparer';\n\nexport class DistinctUntilChangedAsyncIterable<TSource, TKey> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _keySelector: (value: TSource) => TKey | Promise<TKey>;\n  private _comparer: (x: TKey, y: TKey) => boolean | Promise<boolean>;\n\n  constructor(\n    source: AsyncIterable<TSource>,\n    keySelector: (value: TSource) => TKey | Promise<TKey>,\n    comparer: (first: TKey, second: TKey) => boolean | Promise<boolean>\n  ) {\n    super();\n    this._source = source;\n    this._keySelector = keySelector;\n    this._comparer = comparer;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let currentKey: TKey | undefined,\n      hasCurrentKey = false;\n    for await (let item of this._source) {\n      let key = await this._keySelector(item);\n      let comparerEquals = false;\n      if (hasCurrentKey) {\n        comparerEquals = await this._comparer(currentKey!, key);\n      }\n      if (!hasCurrentKey || !comparerEquals) {\n        hasCurrentKey = true;\n        currentKey = key;\n        yield item;\n      }\n    }\n  }\n}\n\nexport function distinctUntilChanged<TSource, TKey>(\n  source: AsyncIterable<TSource>,\n  keySelector: (value: TSource) => TKey | Promise<TKey> = identityAsync,\n  comparer: (first: TKey, second: TKey) => boolean | Promise<boolean> = comparerAsync\n): AsyncIterableX<TSource> {\n  return new DistinctUntilChangedAsyncIterable<TSource, TKey>(source, keySelector, comparer);\n}\n"]}