{"version":3,"sources":["asynciterable/sequenceequal.ts"],"names":[],"mappings":";;AAAA,mDAAqD;AAE9C,KAAK,UAAU,aAAa,CACjC,MAAwB,EACxB,KAAuB,EACvB,WAAgE,wBAAa;IAE7E,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,EACxC,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;IACtC,IAAI,KAAwB,EAAE,KAAwB,CAAC;IACvD,OAAO,CAAC,CAAC,KAAK,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE;QACvC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACrF,OAAO,KAAK,CAAC;SACd;KACF;IAED,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC;AACjC,CAAC;AAfD,sCAeC","file":"sequenceequal.js","sourcesContent":["import { comparerAsync } from '../internal/comparer';\n\nexport async function sequenceEqual<T>(\n  source: AsyncIterable<T>,\n  other: AsyncIterable<T>,\n  comparer: (first: T, second: T) => boolean | Promise<boolean> = comparerAsync\n): Promise<boolean> {\n  const it1 = source[Symbol.asyncIterator](),\n    it2 = other[Symbol.asyncIterator]();\n  let next1: IteratorResult<T>, next2: IteratorResult<T>;\n  while (!(next1 = await it1.next()).done) {\n    if (!(!(next2 = await it2.next()).done && (await comparer(next1.value, next2.value)))) {\n      return false;\n    }\n  }\n\n  return (await it2.next()).done;\n}\n"]}