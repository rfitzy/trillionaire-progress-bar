import { AsyncIterableX } from './asynciterablex';
export class TakeWhileAsyncIterable extends AsyncIterableX {
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    async *[Symbol.asyncIterator]() {
        let i = 0;
        for await (let item of this._source) {
            if (!await this._predicate(item, i++)) {
                break;
            }
            yield item;
        }
    }
}
export function takeWhile(source, predicate) {
    return new TakeWhileAsyncIterable(source, predicate);
}

//# sourceMappingURL=takewhile.mjs.map
