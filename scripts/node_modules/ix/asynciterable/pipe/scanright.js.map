{"version":3,"sources":["asynciterable/pipe/scanright.ts"],"names":[],"mappings":";;AAEA,4CAAsD;AAUtD,SAAgB,SAAS,CACvB,WAAwF,EACxF,GAAG,IAAS;IAEZ,OAAO,SAAS,yBAAyB,CAAC,MAAwB;QAChE,OAAO,IAAI,kCAAsB,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC/D,CAAC,CAAC;AACJ,CAAC;AAPD,8BAOC","file":"scanright.js","sourcesContent":["import { OperatorAsyncFunction } from '../../interfaces';\nimport { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { ScanRightAsyncIterable } from '../scanright';\n\nexport function scanRight<T, R = T>(\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  seed?: never[]\n): OperatorAsyncFunction<T, R>;\nexport function scanRight<T, R = T>(\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  seed?: R\n): OperatorAsyncFunction<T, R>;\nexport function scanRight<T, R = T>(\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  ...seed: R[]\n): OperatorAsyncFunction<T, R> {\n  return function scanRightOperatorFunction(source: AsyncIterable<T>): AsyncIterableX<R> {\n    return new ScanRightAsyncIterable(source, accumulator, seed);\n  };\n}\n"]}