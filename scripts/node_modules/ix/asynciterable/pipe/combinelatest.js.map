{"version":3,"sources":["asynciterable/pipe/combinelatest.ts"],"names":[],"mappings":";;AAEA,oDAA8D;AAC9D,sDAAwD;AAiExD,mCAAmC;AACnC,SAAgB,aAAa,CAAO,GAAG,OAAc;IACnD,OAAO,SAAS,6BAA6B,CAAC,MAAwB;QACpE,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,wBAAa,CAAsC,CAAC;QACjF,IAAI,EAAE,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;YAClC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACpB,EAAE,GAAG,wBAAa,CAAC;SACpB;QACD,OAAO,IAAI,0CAA0B,CAAO,CAAC,MAAM,EAAE,GAAG,OAAO,CAAuB,EAAE,EAAE,CAAC,CAAC;IAC9F,CAAC,CAAC;AACJ,CAAC;AATD,sCASC","file":"combinelatest.js","sourcesContent":["import { OperatorAsyncFunction } from '../../interfaces';\nimport { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { CombineLatestAsyncIterable } from '../combinelatest';\nimport { identityAsync } from '../../internal/identity';\n\nexport function combineLatest<T, T2>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>\n): OperatorAsyncFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>\n): OperatorAsyncFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>\n): OperatorAsyncFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>\n): OperatorAsyncFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>,\n  source6: AsyncIterable<T6>\n): OperatorAsyncFunction<T, [T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, T2, R>(\n  project: (values: [T, T2]) => R | Promise<R>,\n  source2: AsyncIterable<T2>\n): OperatorAsyncFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(\n  project: (values: [T, T2, T3]) => R | Promise<R>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>\n): OperatorAsyncFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(\n  project: (values: [T, T2, T3, T4]) => R | Promise<R>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>\n): OperatorAsyncFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(\n  project: (values: [T, T2, T3, T4, T5]) => R | Promise<R>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>\n): OperatorAsyncFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(\n  project: (values: [T, T2, T3, T4, T5, T6]) => R | Promise<R>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>,\n  source6: AsyncIterable<T6>\n): OperatorAsyncFunction<T, R>;\n\nexport function combineLatest<T>(...sources: AsyncIterable<T>[]): OperatorAsyncFunction<T, T[]>;\nexport function combineLatest<T, R>(\n  project: (values: T[]) => R | Promise<R>,\n  ...sources: AsyncIterable<T>[]\n): OperatorAsyncFunction<T, R>;\n/* tslint:enable:max-line-length */\nexport function combineLatest<T, R>(...sources: any[]): OperatorAsyncFunction<T, R> {\n  return function combineLatestOperatorFunction(source: AsyncIterable<T>): AsyncIterableX<R> {\n    let fn = (sources.shift() || identityAsync) as (values: any[]) => R | Promise<R>;\n    if (fn && typeof fn !== 'function') {\n      sources.unshift(fn);\n      fn = identityAsync;\n    }\n    return new CombineLatestAsyncIterable<T, R>([source, ...sources] as AsyncIterable<T>[], fn);\n  };\n}\n"]}