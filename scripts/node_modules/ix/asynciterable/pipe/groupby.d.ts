import { OperatorAsyncFunction } from '../../interfaces';
import { GroupedAsyncIterable } from '../groupby';
export declare function groupBy<TSource, TKey>(keySelector: (value: TSource) => TKey | Promise<TKey>): OperatorAsyncFunction<TSource, GroupedAsyncIterable<TKey, TSource>>;
export declare function groupBy<TSource, TKey, TValue>(keySelector: (value: TSource) => TKey | Promise<TKey>, elementSelector?: (value: TSource) => TValue | Promise<TValue>): OperatorAsyncFunction<TSource, GroupedAsyncIterable<TKey, TValue>>;
export declare function groupBy<TSource, TKey, TValue, TResult>(keySelector: (value: TSource) => TKey | Promise<TKey>, elementSelector?: (value: TSource) => TValue | Promise<TValue>, resultSelector?: (key: TKey, values: Iterable<TValue>) => TResult | Promise<TResult>): OperatorAsyncFunction<TSource, TResult>;
