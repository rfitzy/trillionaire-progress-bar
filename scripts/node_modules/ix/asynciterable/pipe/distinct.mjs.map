{"version":3,"sources":["asynciterable/pipe/distinct.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAExD,MAAM,UAAU,QAAQ,CACtB,cAAwD,aAAa,EACrE,WAA6D,aAAa;IAE1E,OAAO,SAAS,wBAAwB,CACtC,MAA8B;QAE9B,OAAO,IAAI,qBAAqB,CAAgB,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IACjF,CAAC,CAAC;AACJ,CAAC","file":"distinct.js","sourcesContent":["import { MonoTypeOperatorAsyncFunction } from '../../interfaces';\nimport { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { DistinctAsyncIterable } from '../distinct';\nimport { identityAsync } from '../../internal/identity';\nimport { comparerAsync } from '../../internal/comparer';\n\nexport function distinct<TSource, TKey>(\n  keySelector: (value: TSource) => TKey | Promise<TKey> = identityAsync,\n  comparer: (x: TKey, y: TKey) => boolean | Promise<boolean> = comparerAsync\n): MonoTypeOperatorAsyncFunction<TSource> {\n  return function distinctOperatorFunction(\n    source: AsyncIterable<TSource>\n  ): AsyncIterableX<TSource> {\n    return new DistinctAsyncIterable<TSource, TKey>(source, keySelector, comparer);\n  };\n}\n"]}