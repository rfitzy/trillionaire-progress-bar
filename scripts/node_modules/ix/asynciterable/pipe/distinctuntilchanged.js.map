{"version":3,"sources":["asynciterable/pipe/distinctuntilchanged.ts"],"names":[],"mappings":";;AAEA,kEAA4E;AAC5E,sDAAwD;AACxD,sDAAwD;AAExD,SAAgB,oBAAoB,CAClC,cAAwD,wBAAa,EACrE,WAAsE,wBAAa;IAEnF,OAAO,SAAS,oCAAoC,CAClD,MAA8B;QAE9B,OAAO,IAAI,wDAAiC,CAAgB,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC7F,CAAC,CAAC;AACJ,CAAC;AATD,oDASC","file":"distinctuntilchanged.js","sourcesContent":["import { MonoTypeOperatorAsyncFunction } from '../../interfaces';\nimport { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { DistinctUntilChangedAsyncIterable } from '../distinctuntilchanged';\nimport { identityAsync } from '../../internal/identity';\nimport { comparerAsync } from '../../internal/comparer';\n\nexport function distinctUntilChanged<TSource, TKey>(\n  keySelector: (value: TSource) => TKey | Promise<TKey> = identityAsync,\n  comparer: (first: TKey, second: TKey) => boolean | Promise<boolean> = comparerAsync\n): MonoTypeOperatorAsyncFunction<TSource> {\n  return function distinctUntilChangedOperatorFunction(\n    source: AsyncIterable<TSource>\n  ): AsyncIterableX<TSource> {\n    return new DistinctUntilChangedAsyncIterable<TSource, TKey>(source, keySelector, comparer);\n  };\n}\n"]}