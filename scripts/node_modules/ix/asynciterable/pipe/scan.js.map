{"version":3,"sources":["asynciterable/pipe/scan.ts"],"names":[],"mappings":";;AAEA,kCAA4C;AAU5C,SAAgB,IAAI,CAClB,WAAwF,EACxF,GAAG,IAAS;IAEZ,OAAO,SAAS,oBAAoB,CAAC,MAAwB;QAC3D,OAAO,IAAI,wBAAiB,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC,CAAC;AACJ,CAAC;AAPD,oBAOC","file":"scan.js","sourcesContent":["import { OperatorAsyncFunction } from '../../interfaces';\nimport { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { ScanAsyncIterable } from '../scan';\n\nexport function scan<T, R = T>(\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  seed?: never[]\n): OperatorAsyncFunction<T, R>;\nexport function scan<T, R = T>(\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  seed?: R\n): OperatorAsyncFunction<T, R>;\nexport function scan<T, R = T>(\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  ...seed: R[]\n): OperatorAsyncFunction<T, R> {\n  return function scanOperatorFunction(source: AsyncIterable<T>): AsyncIterableX<R> {\n    return new ScanAsyncIterable(source, accumulator, seed);\n  };\n}\n"]}