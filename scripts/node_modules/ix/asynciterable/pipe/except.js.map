{"version":3,"sources":["asynciterable/pipe/except.ts"],"names":[],"mappings":";;AAEA,sCAAgD;AAChD,sDAAwD;AAExD,SAAgB,MAAM,CACpB,MAA8B,EAC9B,WAAmE,wBAAa;IAEhF,OAAO,SAAS,sBAAsB,CAAC,KAA6B;QAClE,OAAO,IAAI,4BAAmB,CAAU,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IACnE,CAAC,CAAC;AACJ,CAAC;AAPD,wBAOC","file":"except.js","sourcesContent":["import { MonoTypeOperatorAsyncFunction } from '../../interfaces';\nimport { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { ExceptAsyncIterable } from '../except';\nimport { comparerAsync } from '../../internal/comparer';\n\nexport function except<TSource>(\n  second: AsyncIterable<TSource>,\n  comparer: (x: TSource, y: TSource) => boolean | Promise<boolean> = comparerAsync\n): MonoTypeOperatorAsyncFunction<TSource> {\n  return function exceptOperatorFunction(first: AsyncIterable<TSource>): AsyncIterableX<TSource> {\n    return new ExceptAsyncIterable<TSource>(first, second, comparer);\n  };\n}\n"]}