{"version":3,"sources":["asynciterable/pipe/filter.ts"],"names":[],"mappings":";;AAEA,sCAAgD;AAChD,8DAA2D;AAU3D,SAAgB,MAAM,CACpB,SAAwE,EACxE,OAAa;IAEb,OAAO,SAAS,sBAAsB,CAAC,MAA8B;QACnE,OAAO,IAAI,4BAAmB,CAAU,MAAM,EAAE,2BAAY,CAAC,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;IACvF,CAAC,CAAC;AACJ,CAAC;AAPD,wBAOC","file":"filter.js","sourcesContent":["import { OperatorAsyncFunction } from '../../interfaces';\nimport { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { FilterAsyncIterable } from '../filter';\nimport { bindCallback } from '../../internal/bindcallback';\n\nexport function filter<T, S extends T>(\n  predicate: (value: T, index: number) => value is S,\n  thisArg?: any\n): OperatorAsyncFunction<T, S>;\nexport function filter<T>(\n  predicate: (value: T, index: number) => boolean | Promise<boolean>,\n  thisArg?: any\n): OperatorAsyncFunction<T, T>;\nexport function filter<TSource>(\n  predicate: (value: TSource, index: number) => boolean | Promise<boolean>,\n  thisArg?: any\n): OperatorAsyncFunction<TSource, TSource> {\n  return function filterOperatorFunction(source: AsyncIterable<TSource>): AsyncIterableX<TSource> {\n    return new FilterAsyncIterable<TSource>(source, bindCallback(predicate, thisArg, 2));\n  };\n}\n"]}