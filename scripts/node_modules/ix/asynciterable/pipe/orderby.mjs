import { OrderedAsyncIterableX } from '../orderby';
import { sorter as defaultSorter } from '../../internal/sorter';
export function orderBy(keySelector, comparer = defaultSorter) {
    return function orderByOperatorFunction(source) {
        return new OrderedAsyncIterableX(source, keySelector, comparer, false);
    };
}
export function orderByDescending(keySelector, comparer = defaultSorter) {
    return function orderByDescendingOperatorFunction(source) {
        return new OrderedAsyncIterableX(source, keySelector, comparer, true);
    };
}
export function thenBy(keySelector, comparer = defaultSorter) {
    return function thenByOperatorFunction(source) {
        const orderSource = source;
        return new OrderedAsyncIterableX(orderSource._source, keySelector, comparer, false, orderSource);
    };
}
export function thenByDescending(keySelector, comparer = defaultSorter) {
    return function thenByDescendingOperatorFunction(source) {
        const orderSource = source;
        return new OrderedAsyncIterableX(orderSource._source, keySelector, comparer, true, orderSource);
    };
}

//# sourceMappingURL=orderby.mjs.map
