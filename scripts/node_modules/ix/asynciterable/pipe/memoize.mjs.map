{"version":3,"sources":["asynciterable/pipe/memoize.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,IAAI,aAAa,EAAE,MAAM,YAAY,CAAC;AAOtD,MAAM,UAAU,OAAO,CACrB,cAAsB,CAAC,CAAC,EACxB,QAAoE;IAEpE,OAAO,SAAS,uBAAuB,CACrC,MAA8B;QAE9B,OAAO,aAAa,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC,CAAC;AACJ,CAAC","file":"memoize.js","sourcesContent":["import { OperatorAsyncFunction } from '../../interfaces';\nimport { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { memoize as memoizeStatic } from '../memoize';\n\nexport function memoize<TSource>(readerCount?: number): OperatorAsyncFunction<TSource, TSource>;\nexport function memoize<TSource, TResult>(\n  readerCount?: number,\n  selector?: (value: AsyncIterable<TSource>) => AsyncIterable<TResult>\n): OperatorAsyncFunction<TSource, TResult>;\nexport function memoize<TSource, TResult = TSource>(\n  readerCount: number = -1,\n  selector?: (value: AsyncIterable<TSource>) => AsyncIterable<TResult>\n): OperatorAsyncFunction<TSource, TSource | TResult> {\n  return function memoizeOperatorFunction(\n    source: AsyncIterable<TSource>\n  ): AsyncIterableX<TSource | TResult> {\n    return memoizeStatic(source, readerCount, selector);\n  };\n}\n"]}