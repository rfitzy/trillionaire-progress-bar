{"version":3,"sources":["asynciterable/skipwhile.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAElD,MAAa,sBAAgC,SAAQ,+BAAuB;IAI1E,YACE,MAA8B,EAC9B,SAAwE;QAExE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,QAAQ,GAAG,KAAK,EAClB,CAAC,GAAG,CAAC,CAAC;QACR,IAAI,KAAK,EAAE,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;YACtC,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE;gBACrD,QAAQ,GAAG,IAAI,CAAC;aACjB;YACD,IAAI,QAAQ,EAAE;gBACZ,MAAM,OAAO,CAAC;aACf;SACF;IACH,CAAC;CACF;AAzBD,wDAyBC;AAUD,SAAgB,SAAS,CACvB,MAAwB,EACxB,SAAkE;IAElE,OAAO,IAAI,sBAAsB,CAAI,MAAM,EAAE,SAAS,CAAC,CAAC;AAC1D,CAAC;AALD,8BAKC","file":"skipwhile.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\nexport class SkipWhileAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _predicate: (value: TSource, index: number) => boolean | Promise<boolean>;\n\n  constructor(\n    source: AsyncIterable<TSource>,\n    predicate: (value: TSource, index: number) => boolean | Promise<boolean>\n  ) {\n    super();\n    this._source = source;\n    this._predicate = predicate;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let yielding = false,\n      i = 0;\n    for await (let element of this._source) {\n      if (!yielding && !await this._predicate(element, i++)) {\n        yielding = true;\n      }\n      if (yielding) {\n        yield element;\n      }\n    }\n  }\n}\n\nexport function skipWhile<T, S extends T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => value is S\n): AsyncIterableX<S>;\nexport function skipWhile<T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => boolean | Promise<boolean>\n): AsyncIterableX<T>;\nexport function skipWhile<T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => boolean | Promise<boolean>\n): AsyncIterableX<T> {\n  return new SkipWhileAsyncIterable<T>(source, predicate);\n}\n"]}