{"version":3,"sources":["asynciterable/merge.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAElD,oCAAoC;AACpC,MAAM,aAAa,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;AAI5C,SAAS,oBAAoB,CAAI,OAAmB,EAAE,KAAa;IACjE,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAA4B,CAAC;AAC9E,CAAC;AAED,MAAa,kBAAsB,SAAQ,+BAAiB;IAG1D,YAAY,MAA0B;QACpC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QACnC,MAAM,SAAS,GAAG,IAAI,KAAK,CAAmB,MAAM,CAAC,CAAC;QACtD,MAAM,KAAK,GAAG,IAAI,KAAK,CAA0C,MAAM,CAAC,CAAC;QACzE,IAAI,MAAM,GAAG,MAAM,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;YACzD,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;YACxB,KAAK,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;SACrD;QAED,OAAO,MAAM,GAAG,CAAC,EAAE;YACjB,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC;YAC3C,IAAI,KAAK,CAAC,IAAI,EAAE;gBACd,KAAK,CAAC,KAAK,CAAC,GAA4C,aAAa,CAAC;gBACtE,MAAM,EAAE,CAAC;aACV;iBAAM;gBACL,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;gBACnC,KAAK,CAAC,KAAK,CAAC,GAAG,oBAAoB,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;gBAC7D,MAAM,KAAK,CAAC,KAAK,CAAC;aACnB;SACF;IACH,CAAC;CACF;AAhCD,gDAgCC;AAmCD,mCAAmC;AAEnC,SAAgB,KAAK,CAAI,MAAwB,EAAE,GAAG,IAAwB;IAC5E,OAAO,IAAI,kBAAkB,CAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;AACtD,CAAC;AAFD,sBAEC;AAkCD,mCAAmC;AAEnC,SAAgB,WAAW,CAAI,GAAG,IAAwB;IACxD,OAAO,IAAI,kBAAkB,CAAI,IAAI,CAAC,CAAC;AACzC,CAAC;AAFD,kCAEC","file":"merge.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\n// tslint:disable-next-line:no-empty\nconst NEVER_PROMISE = new Promise(() => {});\n\ntype MergeResult<T> = { value: T; index: number };\n\nfunction wrapPromiseWithIndex<T>(promise: Promise<T>, index: number) {\n  return promise.then(value => ({ value, index })) as Promise<MergeResult<T>>;\n}\n\nexport class MergeAsyncIterable<T> extends AsyncIterableX<T> {\n  private _source: AsyncIterable<T>[];\n\n  constructor(source: AsyncIterable<T>[]) {\n    super();\n    this._source = source;\n  }\n\n  async *[Symbol.asyncIterator](): AsyncIterator<T> {\n    const length = this._source.length;\n    const iterators = new Array<AsyncIterator<T>>(length);\n    const nexts = new Array<Promise<MergeResult<IteratorResult<T>>>>(length);\n    let active = length;\n    for (let i = 0; i < length; i++) {\n      const iterator = this._source[i][Symbol.asyncIterator]();\n      iterators[i] = iterator;\n      nexts[i] = wrapPromiseWithIndex(iterator.next(), i);\n    }\n\n    while (active > 0) {\n      const next = Promise.race(nexts);\n      const { value: next$, index } = await next;\n      if (next$.done) {\n        nexts[index] = <Promise<MergeResult<IteratorResult<T>>>>NEVER_PROMISE;\n        active--;\n      } else {\n        const iterator$ = iterators[index];\n        nexts[index] = wrapPromiseWithIndex(iterator$.next(), index);\n        yield next$.value;\n      }\n    }\n  }\n}\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(source: AsyncIterable<T>): AsyncIterableX<T>;\nexport function merge<T, T2>(\n  source: AsyncIterable<T>,\n  v2: AsyncIterable<T2>\n): AsyncIterableX<T | T2>;\nexport function merge<T, T2, T3>(\n  source: AsyncIterable<T>,\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>\n): AsyncIterableX<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(\n  source: AsyncIterable<T>,\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>\n): AsyncIterableX<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(\n  source: AsyncIterable<T>,\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>,\n  v5: AsyncIterable<T5>\n): AsyncIterable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(\n  source: AsyncIterable<T>,\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>,\n  v5: AsyncIterable<T5>,\n  v6: AsyncIterable<T6>\n): AsyncIterable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(source: AsyncIterable<T>, ...args: AsyncIterable<T>[]): AsyncIterableX<T>;\n/* tslint:enable:max-line-length */\n\nexport function merge<T>(source: AsyncIterable<T>, ...args: AsyncIterable<T>[]): AsyncIterableX<T> {\n  return new MergeAsyncIterable<T>([source, ...args]);\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: AsyncIterable<T>): AsyncIterableX<T>;\nexport function mergeStatic<T, T2>(\n  v1: AsyncIterable<T>,\n  v2: AsyncIterable<T2>\n): AsyncIterableX<T | T2>;\nexport function mergeStatic<T, T2, T3>(\n  v1: AsyncIterable<T>,\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>\n): AsyncIterableX<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(\n  v1: AsyncIterable<T>,\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>\n): AsyncIterableX<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(\n  v1: AsyncIterable<T>,\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>,\n  v5: AsyncIterable<T5>\n): AsyncIterable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(\n  v1: AsyncIterable<T>,\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>,\n  v5: AsyncIterable<T5>,\n  v6: AsyncIterable<T6>\n): AsyncIterable<T | T2 | T3 | T4 | T5 | T6>;\n/* tslint:enable:max-line-length */\n\nexport function mergeStatic<T>(...args: AsyncIterable<T>[]): AsyncIterableX<T> {\n  return new MergeAsyncIterable<T>(args);\n}\n"]}