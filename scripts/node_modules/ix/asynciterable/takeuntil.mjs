import { AsyncIterableX } from './asynciterablex';
export class TakeUntilAsyncIterable extends AsyncIterableX {
    constructor(source, other) {
        super();
        this._source = source;
        this._other = other;
    }
    async *[Symbol.asyncIterator]() {
        let otherDone = false;
        this._other().then(() => (otherDone = true));
        for await (let item of this._source) {
            if (otherDone) {
                break;
            }
            yield item;
        }
    }
}
export function takeUntil(source, other) {
    return new TakeUntilAsyncIterable(source, other);
}

//# sourceMappingURL=takeuntil.mjs.map
