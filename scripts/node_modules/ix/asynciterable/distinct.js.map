{"version":3,"sources":["asynciterable/distinct.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAClD,mDAAqD;AACrD,2DAA6D;AAC7D,mDAAqD;AAErD,MAAa,qBAAqC,SAAQ,+BAAuB;IAK/E,YACE,MAA8B,EAC9B,WAAqD,EACrD,QAA0D;QAE1D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,GAAG,GAAG,EAAY,CAAC;QAEvB,IAAI,KAAK,EAAE,IAAI,IAAI,IAA4B,IAAI,CAAC,OAAO,EAAE;YAC3D,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACxC,IAAI,CAAC,MAAM,gCAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC9D,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACd,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AA3BD,sDA2BC;AAED,SAAgB,QAAQ,CACtB,MAA8B,EAC9B,cAAwD,wBAAa,EACrE,WAA6D,wBAAa;IAE1E,OAAO,IAAI,qBAAqB,CAAgB,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;AACjF,CAAC;AAND,4BAMC","file":"distinct.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { identityAsync } from '../internal/identity';\nimport { arrayIndexOfAsync } from '../internal/arrayindexof';\nimport { comparerAsync } from '../internal/comparer';\n\nexport class DistinctAsyncIterable<TSource, TKey> extends AsyncIterableX<TSource> {\n  private _source: Iterable<TSource | PromiseLike<TSource>> | AsyncIterable<TSource>;\n  private _keySelector: (value: TSource) => TKey | Promise<TKey>;\n  private _comparer: (x: TKey, y: TKey) => boolean | Promise<boolean>;\n\n  constructor(\n    source: AsyncIterable<TSource>,\n    keySelector: (value: TSource) => TKey | Promise<TKey>,\n    comparer: (x: TKey, y: TKey) => boolean | Promise<boolean>\n  ) {\n    super();\n    this._source = source;\n    this._keySelector = keySelector;\n    this._comparer = comparer;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let set = [] as TKey[];\n\n    for await (let item of <AsyncIterable<TSource>>this._source) {\n      let key = await this._keySelector(item);\n      if ((await arrayIndexOfAsync(set, key, this._comparer)) === -1) {\n        set.push(key);\n        yield item;\n      }\n    }\n  }\n}\n\nexport function distinct<TSource, TKey>(\n  source: AsyncIterable<TSource>,\n  keySelector: (value: TSource) => TKey | Promise<TKey> = identityAsync,\n  comparer: (x: TKey, y: TKey) => boolean | Promise<boolean> = comparerAsync\n): AsyncIterableX<TSource> {\n  return new DistinctAsyncIterable<TSource, TKey>(source, keySelector, comparer);\n}\n"]}