{"version":3,"sources":["asynciterable/partition.ts"],"names":[],"mappings":";;AACA,qCAAkC;AAYlC,SAAgB,SAAS,CACvB,MAAwB,EACxB,SAAkE,EAClE,OAAa;IAEb,OAAO,CAAC,eAAM,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,eAAM,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;AACnG,CAAC;AAND,8BAMC","file":"partition.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { filter } from './filter';\n\nexport function partition<T, S extends T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => value is S,\n  thisArg?: any\n): AsyncIterableX<S>[];\nexport function partition<T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => boolean | Promise<boolean>,\n  thisArg?: any\n): AsyncIterableX<T>[];\nexport function partition<T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => boolean | Promise<boolean>,\n  thisArg?: any\n): AsyncIterableX<T>[] {\n  return [filter(source, predicate, thisArg), filter(source, (x, i) => !predicate(x, i), thisArg)];\n}\n"]}