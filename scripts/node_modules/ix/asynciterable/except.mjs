import { AsyncIterableX } from './asynciterablex';
import { arrayIndexOfAsync } from '../internal/arrayindexof';
import { comparerAsync } from '../internal/comparer';
export class ExceptAsyncIterable extends AsyncIterableX {
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    async *[Symbol.asyncIterator]() {
        let map = [];
        for await (let secondItem of this._second) {
            map.push(secondItem);
        }
        for await (let firstItem of this._first) {
            if ((await arrayIndexOfAsync(map, firstItem, this._comparer)) === -1) {
                map.push(firstItem);
                yield firstItem;
            }
        }
    }
}
export function except(first, second, comparer = comparerAsync) {
    return new ExceptAsyncIterable(first, second, comparer);
}

//# sourceMappingURL=except.mjs.map
