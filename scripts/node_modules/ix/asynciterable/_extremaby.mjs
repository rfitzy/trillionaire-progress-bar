import { AsyncIterableX } from './asynciterablex';
/**
 * @ignore
 */
export async function defaultCompareAsync(key, minValue) {
    return key > minValue ? 1 : key < minValue ? -1 : 0;
}
/**
 * @ignore
 */
class ExtremaByAsyncIterator extends AsyncIterableX {
    constructor(source, keyFn, cmp) {
        super();
        this._source = source;
        this._keyFn = keyFn;
        this._cmp = cmp;
    }
    async *[Symbol.asyncIterator]() {
        let result = [], done, next;
        const it = this._source[Symbol.asyncIterator]();
        done = (next = await it.next()).done;
        if (done) {
            throw new Error('Sequence contains no elements');
        }
        let current = next.value;
        let resKey = await this._keyFn(current);
        done = (next = await it.next()).done;
        while (!done) {
            let curr = next.value;
            let key = await this._keyFn(curr);
            const c = await this._cmp(key, resKey);
            if (c === 0) {
                result.push(curr);
            }
            else if (c > 0) {
                result = [curr];
                resKey = key;
            }
            done = (next = await it.next()).done;
        }
        yield* result;
    }
}
/**
 * @ignore
 */
export function extremaBy(source, keyFn, cmp) {
    return new ExtremaByAsyncIterator(source, keyFn, cmp);
}

//# sourceMappingURL=_extremaby.mjs.map
