"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asynciterablex_1 = require("./asynciterablex");
const identity_1 = require("../internal/identity");
const returniterator_1 = require("../internal/returniterator");
class ZipAsyncIterable extends asynciterablex_1.AsyncIterableX {
    constructor(sources, fn) {
        super();
        this._sources = sources;
        this._fn = fn;
    }
    async *[Symbol.asyncIterator]() {
        const fn = this._fn;
        const sourcesLength = this._sources.length;
        const its = this._sources.map(x => x[Symbol.asyncIterator]());
        while (sourcesLength > 0) {
            const values = new Array(sourcesLength);
            for (let i = -1; ++i < sourcesLength;) {
                const result = await its[i].next();
                if (result.done) {
                    await Promise.all(its.map(returniterator_1.returnAsyncIterator));
                    return undefined;
                }
                values[i] = result.value;
            }
            yield await fn(values);
        }
    }
}
exports.ZipAsyncIterable = ZipAsyncIterable;
/* tslint:enable:max-line-length */
function zip(...sources) {
    let fn = (sources.shift() || identity_1.identityAsync);
    if (fn && typeof fn !== 'function') {
        sources.unshift(fn);
        fn = identity_1.identityAsync;
    }
    return new ZipAsyncIterable(sources, fn);
}
exports.zip = zip;

//# sourceMappingURL=zip.js.map
