import { AsyncIterableX } from './asynciterablex';
import { arrayIndexOfAsync } from '../internal/arrayindexof';
import { comparerAsync } from '../internal/comparer';
async function arrayRemove(array, item, comparer) {
    let idx = await arrayIndexOfAsync(array, item, comparer);
    if (idx === -1) {
        return false;
    }
    array.splice(idx, 1);
    return true;
}
export class IntersectAsyncIterable extends AsyncIterableX {
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    async *[Symbol.asyncIterator]() {
        let map = [];
        for await (let secondItem of this._second) {
            map.push(secondItem);
        }
        for await (let firstItem of this._first) {
            if (await arrayRemove(map, firstItem, this._comparer)) {
                yield firstItem;
            }
        }
    }
}
export function intersect(first, second, comparer = comparerAsync) {
    return new IntersectAsyncIterable(first, second, comparer);
}

//# sourceMappingURL=intersect.mjs.map
