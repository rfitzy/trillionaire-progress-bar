{"version":3,"sources":["asynciterable/forkjoin.ts"],"names":[],"mappings":";;AAAA,mDAA+D;AAE/D,oCAAoC;AACpC,MAAM,aAAa,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;AAI5C,SAAS,oBAAoB,CAAI,OAAmB,EAAE,KAAa;IACjE,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAA4B,CAAC;AAC9E,CAAC;AA+EM,KAAK,UAAU,QAAQ,CAAO,GAAG,OAAc;IACpD,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,wBAAa,CAAsC,CAAC;IACjF,IAAI,EAAE,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;QAClC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpB,EAAE,GAAG,wBAAa,CAAC;KACpB;IAED,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAC9B,MAAM,SAAS,GAAG,IAAI,KAAK,CAAmB,MAAM,CAAC,CAAC;IACtD,MAAM,KAAK,GAAG,IAAI,KAAK,CAA0C,MAAM,CAAC,CAAC;IAEzE,IAAI,MAAM,GAAG,MAAM,CAAC;IACpB,MAAM,MAAM,GAAG,IAAI,KAAK,CAAI,MAAM,CAAC,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,KAAK,CAAU,MAAM,CAAC,CAAC;IAC7C,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,MAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;QACpD,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;QACxB,KAAK,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;KACrD;IAED,OAAO,MAAM,GAAG,CAAC,EAAE;QACjB,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC;QAC3C,IAAI,KAAK,CAAC,IAAI,EAAE;YACd,KAAK,CAAC,KAAK,CAAC,GAA4C,aAAa,CAAC;YACtE,MAAM,EAAE,CAAC;SACV;aAAM;YACL,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;YACnC,KAAK,CAAC,KAAK,CAAC,GAAG,oBAAoB,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;YAC7D,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;SAC7B;KACF;IAED,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC,mBAAQ,CAAC,EAAE;QACrD,OAAO,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC;KACzB;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAzCD,4BAyCC","file":"forkjoin.js","sourcesContent":["import { identity, identityAsync } from '../internal/identity';\n\n// tslint:disable-next-line:no-empty\nconst NEVER_PROMISE = new Promise(() => {});\n\ntype MergeResult<T> = { value: T; index: number };\n\nfunction wrapPromiseWithIndex<T>(promise: Promise<T>, index: number) {\n  return promise.then(value => ({ value, index })) as Promise<MergeResult<T>>;\n}\n\nexport function forkJoin<T, T2>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>\n): Promise<[T, T2] | undefined>;\nexport function forkJoin<T, T2, T3>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>\n): Promise<[T, T2, T3] | undefined>;\nexport function forkJoin<T, T2, T3, T4>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>\n): Promise<[T, T2, T3, T4] | undefined>;\nexport function forkJoin<T, T2, T3, T4, T5>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>\n): Promise<[T, T2, T3, T4, T5] | undefined>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>,\n  source6: AsyncIterable<T6>\n): Promise<[T, T2, T3, T4, T5, T6] | undefined>;\n\nexport function forkJoin<T, R>(\n  project: (values: [T]) => R | Promise<R>,\n  source: AsyncIterable<T>\n): Promise<R | undefined>;\nexport function forkJoin<T, T2, R>(\n  project: (values: [T, T2]) => R | Promise<R>,\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>\n): Promise<R | undefined>;\nexport function forkJoin<T, T2, T3, R>(\n  project: (values: [T, T2, T3]) => R | Promise<R>,\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>\n): Promise<R | undefined>;\nexport function forkJoin<T, T2, T3, T4, R>(\n  project: (values: [T, T2, T3, T4]) => R | Promise<R>,\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>\n): Promise<R | undefined>;\nexport function forkJoin<T, T2, T3, T4, T5, R>(\n  project: (values: [T, T2, T3, T4, T5]) => R | Promise<R>,\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>\n): Promise<R | undefined>;\nexport function forkJoin<T, T2, T3, T4, T5, T6, R>(\n  project: (values: [T, T2, T3, T4, T5, T6]) => R | Promise<R>,\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>,\n  source6: AsyncIterable<T6>\n): Promise<R | undefined>;\n\nexport function forkJoin<T>(...sources: AsyncIterable<T>[]): Promise<T[] | undefined>;\nexport function forkJoin<T, R>(\n  project: (values: T[]) => R | Promise<R>,\n  ...sources: AsyncIterable<T>[]\n): Promise<R | undefined>;\n\nexport async function forkJoin<T, R>(...sources: any[]): Promise<R | undefined> {\n  let fn = (sources.shift() || identityAsync) as (values: any[]) => R | Promise<R>;\n  if (fn && typeof fn !== 'function') {\n    sources.unshift(fn);\n    fn = identityAsync;\n  }\n\n  const length = sources.length;\n  const iterators = new Array<AsyncIterator<T>>(length);\n  const nexts = new Array<Promise<MergeResult<IteratorResult<T>>>>(length);\n\n  let active = length;\n  const values = new Array<T>(length);\n  const hasValues = new Array<boolean>(length);\n  hasValues.fill(false);\n\n  for (let i = 0; i < length; i++) {\n    const iterator = sources[i][Symbol.asyncIterator]();\n    iterators[i] = iterator;\n    nexts[i] = wrapPromiseWithIndex(iterator.next(), i);\n  }\n\n  while (active > 0) {\n    const next = Promise.race(nexts);\n    const { value: next$, index } = await next;\n    if (next$.done) {\n      nexts[index] = <Promise<MergeResult<IteratorResult<T>>>>NEVER_PROMISE;\n      active--;\n    } else {\n      const iterator$ = iterators[index];\n      nexts[index] = wrapPromiseWithIndex(iterator$.next(), index);\n      hasValues[index] = true;\n      values[index] = next$.value;\n    }\n  }\n\n  if (hasValues.length > 0 && hasValues.every(identity)) {\n    return await fn(values);\n  }\n\n  return undefined;\n}\n"]}