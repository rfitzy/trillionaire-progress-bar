{"version":3,"sources":["asynciterable/skiplast.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,OAAO,qBAA+B,SAAQ,cAAuB;IAIzE,YAAY,MAA8B,EAAE,KAAa;QACvD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,CAAC,GAAG,EAAe,CAAC;QACxB,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YACnC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACb,IAAI,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE;gBAC1B,MAAM,CAAC,CAAC,KAAK,EAAG,CAAC;aAClB;SACF;IACH,CAAC;CACF;AAED,MAAM,UAAU,QAAQ,CACtB,MAA8B,EAC9B,KAAa;IAEb,OAAO,IAAI,qBAAqB,CAAU,MAAM,EAAE,KAAK,CAAC,CAAC;AAC3D,CAAC","file":"skiplast.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\nexport class SkipLastAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _count: number;\n\n  constructor(source: AsyncIterable<TSource>, count: number) {\n    super();\n    this._source = source;\n    this._count = count;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let q = [] as TSource[];\n    for await (let item of this._source) {\n      q.push(item);\n      if (q.length > this._count) {\n        yield q.shift()!;\n      }\n    }\n  }\n}\n\nexport function skipLast<TSource>(\n  source: AsyncIterable<TSource>,\n  count: number\n): AsyncIterableX<TSource> {\n  return new SkipLastAsyncIterable<TSource>(source, count);\n}\n"]}