import { AsyncIterableX } from './asynciterablex';
import { identityAsync } from '../internal/identity';
import { createGrouping } from './_grouping';
export class GroupedAsyncIterable extends AsyncIterableX {
    constructor(key, source) {
        super();
        this.key = key;
        this._source = source;
    }
    async *[Symbol.asyncIterator]() {
        for (let item of this._source) {
            yield item;
        }
    }
}
export class GroupByAsyncIterable extends AsyncIterableX {
    constructor(source, keySelector, elementSelector, resultSelector) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._elementSelector = elementSelector;
        this._resultSelector = resultSelector;
    }
    async *[Symbol.asyncIterator]() {
        const map = await createGrouping(this._source, this._keySelector, this._elementSelector);
        for (let [key, values] of map) {
            yield await this._resultSelector(key, values);
        }
    }
}
export function groupByResultIdentityAsync(key, values) {
    return new GroupedAsyncIterable(key, values);
}
export function groupBy(source, keySelector, elementSelector = identityAsync, resultSelector = groupByResultIdentityAsync) {
    return new GroupByAsyncIterable(source, keySelector, elementSelector, resultSelector);
}

//# sourceMappingURL=groupby.mjs.map
