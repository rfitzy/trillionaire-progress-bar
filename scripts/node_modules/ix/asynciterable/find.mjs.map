{"version":3,"sources":["asynciterable/find.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAYxD,MAAM,CAAC,KAAK,UAAU,IAAI,CACxB,MAAwB,EACxB,SAAkE,EAClE,OAAa;IAEb,MAAM,EAAE,GAAG,YAAY,CAAC,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IAC/C,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,MAAM,EAAE;QAC7B,IAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC","file":"find.js","sourcesContent":["import { bindCallback } from '../internal/bindcallback';\n\nexport async function find<T, S extends T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => value is S,\n  thisArg?: any\n): Promise<S | undefined>;\nexport async function find<T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => boolean | Promise<boolean>,\n  thisArg?: any\n): Promise<T | undefined>;\nexport async function find<T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => boolean | Promise<boolean>,\n  thisArg?: any\n): Promise<T | undefined> {\n  const fn = bindCallback(predicate, thisArg, 2);\n  let i = 0;\n\n  for await (let item of source) {\n    if (await fn(item, i++)) {\n      return item;\n    }\n  }\n  return undefined;\n}\n"]}