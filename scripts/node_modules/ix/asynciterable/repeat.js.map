{"version":3,"sources":["asynciterable/repeat.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAElD,MAAa,mBAA6B,SAAQ,+BAAuB;IAIvE,YAAY,MAA8B,EAAE,KAAa;QACvD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;YACtB,OAAO,CAAC,EAAE;gBACR,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;oBACnC,MAAM,IAAI,CAAC;iBACZ;aACF;SACF;aAAM;YACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;oBACnC,MAAM,IAAI,CAAC;iBACZ;aACF;SACF;IACH,CAAC;CACF;AAzBD,kDAyBC;AAED,SAAgB,MAAM,CACpB,MAA8B,EAC9B,QAAgB,CAAC,CAAC;IAElB,OAAO,IAAI,mBAAmB,CAAU,MAAM,EAAE,KAAK,CAAC,CAAC;AACzD,CAAC;AALD,wBAKC;AAED,SAAgB,YAAY,CAAU,KAAc,EAAE,QAAgB,CAAC,CAAC;IACtE,OAAO,IAAI,mBAAmB,CAAU,+BAAc,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;AAC3E,CAAC;AAFD,oCAEC","file":"repeat.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\nexport class RepeatAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _count: number;\n\n  constructor(source: AsyncIterable<TSource>, count: number) {\n    super();\n    this._source = source;\n    this._count = count;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    if (this._count === -1) {\n      while (1) {\n        for await (let item of this._source) {\n          yield item;\n        }\n      }\n    } else {\n      for (let i = 0; i < this._count; i++) {\n        for await (let item of this._source) {\n          yield item;\n        }\n      }\n    }\n  }\n}\n\nexport function repeat<TSource>(\n  source: AsyncIterable<TSource>,\n  count: number = -1\n): AsyncIterableX<TSource> {\n  return new RepeatAsyncIterable<TSource>(source, count);\n}\n\nexport function repeatStatic<TSource>(value: TSource, count: number = -1): AsyncIterableX<TSource> {\n  return new RepeatAsyncIterable<TSource>(AsyncIterableX.of(value), count);\n}\n"]}