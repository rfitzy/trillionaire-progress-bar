import { AsyncIterableX } from './asynciterablex';
import { sleep } from './_sleep';
export class DelayEachAsyncIterable extends AsyncIterableX {
    constructor(source, dueTime) {
        super();
        this._source = source;
        this._dueTime = dueTime;
    }
    async *[Symbol.asyncIterator]() {
        for await (const item of this._source) {
            await sleep(this._dueTime);
            yield item;
        }
    }
}
export function delayEach(source, dueTime) {
    return new DelayEachAsyncIterable(source, dueTime);
}

//# sourceMappingURL=delayeach.mjs.map
