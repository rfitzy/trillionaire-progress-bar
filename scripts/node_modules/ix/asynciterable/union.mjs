import { AsyncIterableX } from './asynciterablex';
import { arrayIndexOfAsync } from '../internal/arrayindexof';
import { comparerAsync } from '../internal/comparer';
export class UnionAsyncIterable extends AsyncIterableX {
    constructor(left, right, comparer) {
        super();
        this._left = left;
        this._right = right;
        this._comparer = comparer;
    }
    async *[Symbol.asyncIterator]() {
        let map = [];
        for await (let lItem of this._left) {
            if ((await arrayIndexOfAsync(map, lItem, this._comparer)) === -1) {
                map.push(lItem);
                yield lItem;
            }
        }
        for await (let rItem of this._right) {
            if ((await arrayIndexOfAsync(map, rItem, this._comparer)) === -1) {
                map.push(rItem);
                yield rItem;
            }
        }
    }
}
export function union(left, right, comparer = comparerAsync) {
    return new UnionAsyncIterable(left, right, comparer);
}

//# sourceMappingURL=union.mjs.map
