import { AsyncIterableX } from './asynciterablex';
export declare class FilterAsyncIterable<TSource> extends AsyncIterableX<TSource> {
    private _source;
    private _predicate;
    constructor(source: Iterable<TSource | PromiseLike<TSource>> | AsyncIterable<TSource>, predicate: (value: TSource, index: number) => boolean | Promise<boolean>);
    [Symbol.asyncIterator](): AsyncIterableIterator<TSource>;
}
export declare function filter<T, S extends T>(source: Iterable<T | PromiseLike<T>> | AsyncIterable<T>, predicate: (value: T, index: number) => value is S, thisArg?: any): AsyncIterableX<S>;
export declare function filter<T>(source: Iterable<T | PromiseLike<T>> | AsyncIterable<T>, predicate: (value: T, index: number) => boolean | Promise<boolean>, thisArg?: any): AsyncIterableX<T>;
