import { AsyncIterableX } from './asynciterablex';
export declare class TakeWhileAsyncIterable<TSource> extends AsyncIterableX<TSource> {
    private _source;
    private _predicate;
    constructor(source: AsyncIterable<TSource>, predicate: (value: TSource, index: number) => boolean | Promise<boolean>);
    [Symbol.asyncIterator](): AsyncIterableIterator<TSource>;
}
export declare function takeWhile<T, S extends T>(source: AsyncIterable<T>, predicate: (value: T, index: number) => value is S): AsyncIterableX<S>;
export declare function takeWhile<T>(source: AsyncIterable<T>, predicate: (value: T, index: number) => boolean | Promise<boolean>): AsyncIterableX<T>;
