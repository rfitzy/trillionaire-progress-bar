{"version":3,"sources":["asynciterable/defer.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAElD,MAAM,kBAA4B,SAAQ,+BAAuB;IAG/D,YAAY,EAAkE;QAC5E,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,KAAK,EAAE;YAC5B,MAAM,IAAI,CAAC;SACZ;IACH,CAAC;CACF;AAED,SAAgB,KAAK,CACnB,OAAuE;IAEvE,OAAO,IAAI,kBAAkB,CAAU,OAAO,CAAC,CAAC;AAClD,CAAC;AAJD,sBAIC","file":"defer.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\nclass DeferAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _fn: () => AsyncIterable<TSource> | Promise<AsyncIterable<TSource>>;\n\n  constructor(fn: () => AsyncIterable<TSource> | Promise<AsyncIterable<TSource>>) {\n    super();\n    this._fn = fn;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let items = await this._fn();\n    for await (let item of items) {\n      yield item;\n    }\n  }\n}\n\nexport function defer<TSource>(\n  factory: () => AsyncIterable<TSource> | Promise<AsyncIterable<TSource>>\n): AsyncIterableX<TSource> {\n  return new DeferAsyncIterable<TSource>(factory);\n}\n"]}