{"version":3,"sources":["asynciterable/case.ts"],"names":[],"mappings":";;AACA,mCAAgC;AAChC,mCAAgC;AAEhC,SAAgB,KAAK,CACnB,QAA0C,EAC1C,OAA6C,EAC7C,gBAAwC,aAAK,EAAW;IAExD,OAAO,aAAK,CAAU,KAAK,IAAI,EAAE;QAC/B,MAAM,GAAG,GAAG,MAAM,QAAQ,EAAE,CAAC;QAC7B,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC,aAAa,CAAC;IAC9D,CAAC,CAAC,CAAC;AACL,CAAC;AATD,sBASC","file":"case.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { defer } from './defer';\nimport { empty } from './empty';\n\nexport function _case<TSource, TResult>(\n  selector: () => TSource | Promise<TSource>,\n  sources: Map<TSource, AsyncIterable<TResult>>,\n  defaultSource: AsyncIterable<TResult> = empty<TResult>()\n): AsyncIterableX<TResult> {\n  return defer<TResult>(async () => {\n    const key = await selector();\n    return sources.has(key) ? sources.get(key)! : defaultSource;\n  });\n}\n"]}