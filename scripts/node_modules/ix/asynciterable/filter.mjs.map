{"version":3,"sources":["asynciterable/filter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD,MAAM,OAAO,mBAA6B,SAAQ,cAAuB;IAIvE,YACE,MAAyE,EACzE,SAAwE;QAExE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,KAAK,EAAE,IAAI,IAAI,IAA4B,IAAI,CAAC,OAAO,EAAE;YAC3D,IAAI,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE;gBACpC,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AAYD,MAAM,UAAU,MAAM,CACpB,MAAyE,EACzE,SAAwE,EACxE,OAAa;IAEb,OAAO,IAAI,mBAAmB,CAAU,MAAM,EAAE,YAAY,CAAC,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;AACvF,CAAC","file":"filter.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { bindCallback } from '../internal/bindcallback';\n\nexport class FilterAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: Iterable<TSource | PromiseLike<TSource>> | AsyncIterable<TSource>;\n  private _predicate: (value: TSource, index: number) => boolean | Promise<boolean>;\n\n  constructor(\n    source: Iterable<TSource | PromiseLike<TSource>> | AsyncIterable<TSource>,\n    predicate: (value: TSource, index: number) => boolean | Promise<boolean>\n  ) {\n    super();\n    this._source = source;\n    this._predicate = predicate;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let i = 0;\n    for await (let item of <AsyncIterable<TSource>>this._source) {\n      if (await this._predicate(item, i++)) {\n        yield item;\n      }\n    }\n  }\n}\n\nexport function filter<T, S extends T>(\n  source: Iterable<T | PromiseLike<T>> | AsyncIterable<T>,\n  predicate: (value: T, index: number) => value is S,\n  thisArg?: any\n): AsyncIterableX<S>;\nexport function filter<T>(\n  source: Iterable<T | PromiseLike<T>> | AsyncIterable<T>,\n  predicate: (value: T, index: number) => boolean | Promise<boolean>,\n  thisArg?: any\n): AsyncIterableX<T>;\nexport function filter<TSource>(\n  source: Iterable<TSource | PromiseLike<TSource>> | AsyncIterable<TSource>,\n  predicate: (value: TSource, index: number) => boolean | Promise<boolean>,\n  thisArg?: any\n): AsyncIterableX<TSource> {\n  return new FilterAsyncIterable<TSource>(source, bindCallback(predicate, thisArg, 2));\n}\n"]}