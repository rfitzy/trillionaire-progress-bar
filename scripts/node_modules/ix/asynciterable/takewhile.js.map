{"version":3,"sources":["asynciterable/takewhile.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAElD,MAAa,sBAAgC,SAAQ,+BAAuB;IAI1E,YACE,MAA8B,EAC9B,SAAwE;QAExE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YACnC,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE;gBACrC,MAAM;aACP;YACD,MAAM,IAAI,CAAC;SACZ;IACH,CAAC;CACF;AAtBD,wDAsBC;AAUD,SAAgB,SAAS,CACvB,MAAwB,EACxB,SAAkE;IAElE,OAAO,IAAI,sBAAsB,CAAI,MAAM,EAAE,SAAS,CAAC,CAAC;AAC1D,CAAC;AALD,8BAKC","file":"takewhile.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\nexport class TakeWhileAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _predicate: (value: TSource, index: number) => boolean | Promise<boolean>;\n\n  constructor(\n    source: AsyncIterable<TSource>,\n    predicate: (value: TSource, index: number) => boolean | Promise<boolean>\n  ) {\n    super();\n    this._source = source;\n    this._predicate = predicate;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let i = 0;\n    for await (let item of this._source) {\n      if (!await this._predicate(item, i++)) {\n        break;\n      }\n      yield item;\n    }\n  }\n}\n\nexport function takeWhile<T, S extends T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => value is S\n): AsyncIterableX<S>;\nexport function takeWhile<T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => boolean | Promise<boolean>\n): AsyncIterableX<T>;\nexport function takeWhile<T>(\n  source: AsyncIterable<T>,\n  predicate: (value: T, index: number) => boolean | Promise<boolean>\n): AsyncIterableX<T> {\n  return new TakeWhileAsyncIterable<T>(source, predicate);\n}\n"]}