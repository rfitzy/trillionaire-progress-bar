import { AsyncIterableX } from './asynciterablex';
import { bindCallback } from '../internal/bindcallback';
export class FlatMapAsyncIterable extends AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    async *[Symbol.asyncIterator]() {
        for await (let outer of this._source) {
            const inners = await this._selector(outer);
            for await (let inner of inners) {
                yield inner;
            }
        }
    }
}
export function flatMap(source, selector, thisArg) {
    return new FlatMapAsyncIterable(source, bindCallback(selector, thisArg, 1));
}

//# sourceMappingURL=flatmap.mjs.map
