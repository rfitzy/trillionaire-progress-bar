{"version":3,"sources":["asynciterable/flatten.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAClD,uDAAyD;AAEzD,MAAa,oBAA8B,SAAQ,+BAAuB;IAIxE,YAAY,MAA8B,EAAE,KAAa;QACvD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAEO,KAAK,CAAC,CAAC,QAAQ,CAAC,MAA8B,EAAE,KAAa;QACnE,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,MAAM,EAAE;gBAC7B,MAAM,IAAI,CAAC;aACZ;YACD,OAAO,SAAS,CAAC;SAClB;QACD,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,MAAM,EAAE;YAC7B,IAAI,4BAAe,CAAC,IAAI,CAAC,EAAE;gBACzB,IAAI,KAAK,EAAE,IAAI,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,EAAE;oBAC1D,MAAM,SAAS,CAAC;iBACjB;aACF;iBAAM;gBACL,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;IAED,CAAC,MAAM,CAAC,aAAa,CAAC;QACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;IAC1E,CAAC;CACF;AA/BD,oDA+BC;AAED,SAAgB,OAAO,CAAI,MAAwB,EAAE,QAAgB,QAAQ;IAC3E,OAAO,IAAI,oBAAoB,CAAI,MAAM,EAAE,KAAK,CAAC,CAAC;AACpD,CAAC;AAFD,0BAEC","file":"flatten.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { isAsyncIterable } from '../internal/isiterable';\n\nexport class FlattenAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _depth: number;\n\n  constructor(source: AsyncIterable<TSource>, depth: number) {\n    super();\n    this._source = source;\n    this._depth = depth;\n  }\n\n  private async *_flatten(source: AsyncIterable<TSource>, depth: number): AsyncIterable<TSource> {\n    if (depth === 0) {\n      for await (let item of source) {\n        yield item;\n      }\n      return undefined;\n    }\n    for await (let item of source) {\n      if (isAsyncIterable(item)) {\n        for await (let innerItem of this._flatten(item, depth - 1)) {\n          yield innerItem;\n        }\n      } else {\n        yield item;\n      }\n    }\n  }\n\n  [Symbol.asyncIterator]() {\n    return this._flatten(this._source, this._depth)[Symbol.asyncIterator]();\n  }\n}\n\nexport function flatten<T>(source: AsyncIterable<T>, depth: number = Infinity): AsyncIterableX<T> {\n  return new FlattenAsyncIterable<T>(source, depth);\n}\n"]}