import { AsyncIterableX } from './asynciterablex';
import { returnAsyncIterator } from '../internal/returniterator';
export class CatchAllAsyncIterable extends AsyncIterableX {
    constructor(source) {
        super();
        this._source = source;
    }
    async *[Symbol.asyncIterator]() {
        let error = null, hasError = false;
        for (let source of this._source) {
            const it = source[Symbol.asyncIterator]();
            error = null;
            hasError = false;
            while (1) {
                let c = {};
                try {
                    const { done, value } = await it.next();
                    if (done) {
                        await returnAsyncIterator(it);
                        break;
                    }
                    c = value;
                }
                catch (e) {
                    error = e;
                    hasError = true;
                    await returnAsyncIterator(it);
                    break;
                }
                yield c;
            }
            if (!hasError) {
                break;
            }
        }
        if (hasError) {
            throw error;
        }
    }
}
export function _catchAll(source) {
    return new CatchAllAsyncIterable(source);
}
export function _catch(source, ...args) {
    return _catchAll([source, ...args]);
}
export function _catchStatic(...source) {
    return _catchAll(source);
}

//# sourceMappingURL=catch.mjs.map
