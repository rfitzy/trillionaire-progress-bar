"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asynciterablex_1 = require("./asynciterablex");
// tslint:disable-next-line:no-empty
const NEVER_PROMISE = new Promise(() => { });
function wrapPromiseWithIndex(promise, index) {
    return promise.then(value => ({ value, index }));
}
class MergeAsyncIterable extends asynciterablex_1.AsyncIterableX {
    constructor(source) {
        super();
        this._source = source;
    }
    async *[Symbol.asyncIterator]() {
        const length = this._source.length;
        const iterators = new Array(length);
        const nexts = new Array(length);
        let active = length;
        for (let i = 0; i < length; i++) {
            const iterator = this._source[i][Symbol.asyncIterator]();
            iterators[i] = iterator;
            nexts[i] = wrapPromiseWithIndex(iterator.next(), i);
        }
        while (active > 0) {
            const next = Promise.race(nexts);
            const { value: next$, index } = await next;
            if (next$.done) {
                nexts[index] = NEVER_PROMISE;
                active--;
            }
            else {
                const iterator$ = iterators[index];
                nexts[index] = wrapPromiseWithIndex(iterator$.next(), index);
                yield next$.value;
            }
        }
    }
}
exports.MergeAsyncIterable = MergeAsyncIterable;
/* tslint:enable:max-line-length */
function merge(source, ...args) {
    return new MergeAsyncIterable([source, ...args]);
}
exports.merge = merge;
/* tslint:enable:max-line-length */
function mergeStatic(...args) {
    return new MergeAsyncIterable(args);
}
exports.mergeStatic = mergeStatic;

//# sourceMappingURL=merge.js.map
