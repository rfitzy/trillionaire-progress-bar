import { AsyncIterableX } from './asynciterablex';
export class SkipWhileAsyncIterable extends AsyncIterableX {
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    async *[Symbol.asyncIterator]() {
        let yielding = false, i = 0;
        for await (let element of this._source) {
            if (!yielding && !await this._predicate(element, i++)) {
                yielding = true;
            }
            if (yielding) {
                yield element;
            }
        }
    }
}
export function skipWhile(source, predicate) {
    return new SkipWhileAsyncIterable(source, predicate);
}

//# sourceMappingURL=skipwhile.mjs.map
