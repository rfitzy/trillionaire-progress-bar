{"version":3,"sources":["asynciterable/buffer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,OAAO,mBAA6B,SAAQ,cAAyB;IAKzE,YAAY,MAA8B,EAAE,KAAa,EAAE,IAAY;QACrE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,OAAO,GAAgB,EAAE,EAC3B,CAAC,GAAG,CAAC,CAAC;QACR,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YACnC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;gBACxB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAClB;YAED,KAAK,IAAI,MAAM,IAAI,OAAO,EAAE;gBAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnB;YAED,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;gBAC3D,MAAM,OAAO,CAAC,KAAK,EAAG,CAAC;aACxB;YAED,CAAC,EAAE,CAAC;SACL;QAED,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,MAAM,OAAO,CAAC,KAAK,EAAG,CAAC;SACxB;IACH,CAAC;CACF;AAED,MAAM,UAAU,MAAM,CACpB,MAA8B,EAC9B,KAAa,EACb,IAAa;IAEb,IAAI,IAAI,IAAI,IAAI,EAAE;QAChB,IAAI,GAAG,KAAK,CAAC;KACd;IACD,OAAO,IAAI,mBAAmB,CAAU,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AAC/D,CAAC","file":"buffer.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\nexport class BufferAsyncIterable<TSource> extends AsyncIterableX<TSource[]> {\n  private _source: AsyncIterable<TSource>;\n  private _count: number;\n  private _skip: number;\n\n  constructor(source: AsyncIterable<TSource>, count: number, skip: number) {\n    super();\n    this._source = source;\n    this._count = count;\n    this._skip = skip;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let buffers: TSource[][] = [],\n      i = 0;\n    for await (let item of this._source) {\n      if (i % this._skip === 0) {\n        buffers.push([]);\n      }\n\n      for (let buffer of buffers) {\n        buffer.push(item);\n      }\n\n      if (buffers.length > 0 && buffers[0].length === this._count) {\n        yield buffers.shift()!;\n      }\n\n      i++;\n    }\n\n    while (buffers.length > 0) {\n      yield buffers.shift()!;\n    }\n  }\n}\n\nexport function buffer<TSource>(\n  source: AsyncIterable<TSource>,\n  count: number,\n  skip?: number\n): AsyncIterableX<TSource[]> {\n  if (skip == null) {\n    skip = count;\n  }\n  return new BufferAsyncIterable<TSource>(source, count, skip);\n}\n"]}