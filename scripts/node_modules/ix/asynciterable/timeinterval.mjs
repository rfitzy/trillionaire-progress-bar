import { AsyncIterableX } from './asynciterablex';
export class TimeIntervalAsyncIterable extends AsyncIterableX {
    constructor(source) {
        super();
        this._source = source;
    }
    async *[Symbol.asyncIterator]() {
        let last = Date.now();
        for await (let item of this._source) {
            const now = Date.now();
            const span = now - last;
            last = now;
            yield { value: item, elapsed: span };
        }
    }
}
export function timeInterval(source) {
    return new TimeIntervalAsyncIterable(source);
}

//# sourceMappingURL=timeinterval.mjs.map
