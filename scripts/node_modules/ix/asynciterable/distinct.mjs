import { AsyncIterableX } from './asynciterablex';
import { identityAsync } from '../internal/identity';
import { arrayIndexOfAsync } from '../internal/arrayindexof';
import { comparerAsync } from '../internal/comparer';
export class DistinctAsyncIterable extends AsyncIterableX {
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    async *[Symbol.asyncIterator]() {
        let set = [];
        for await (let item of this._source) {
            let key = await this._keySelector(item);
            if ((await arrayIndexOfAsync(set, key, this._comparer)) === -1) {
                set.push(key);
                yield item;
            }
        }
    }
}
export function distinct(source, keySelector = identityAsync, comparer = comparerAsync) {
    return new DistinctAsyncIterable(source, keySelector, comparer);
}

//# sourceMappingURL=distinct.mjs.map
