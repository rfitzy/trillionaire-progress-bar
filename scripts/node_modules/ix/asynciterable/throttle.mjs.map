{"version":3,"sources":["asynciterable/throttle.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,OAAO,qBAA+B,SAAQ,cAAuB;IAIzE,YAAY,MAA8B,EAAE,IAAY;QACtD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,WAAW,EAAE,YAAY,CAAC;QAC9B,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YACrC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACzB,IAAI,CAAC,YAAY,IAAI,WAAW,GAAG,YAAY,GAAG,IAAI,CAAC,KAAK,EAAE;gBAC5D,YAAY,GAAG,WAAW,CAAC;gBAC3B,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AAED,MAAM,UAAU,QAAQ,CACtB,MAA8B,EAC9B,IAAY;IAEZ,OAAO,IAAI,qBAAqB,CAAU,MAAM,EAAE,IAAI,CAAC,CAAC;AAC1D,CAAC","file":"throttle.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\nexport class ThrottleAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _time: number;\n\n  constructor(source: AsyncIterable<TSource>, time: number) {\n    super();\n    this._source = source;\n    this._time = time;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let currentTime, previousTime;\n    for await (const item of this._source) {\n      currentTime = Date.now();\n      if (!previousTime || currentTime - previousTime > this._time) {\n        previousTime = currentTime;\n        yield item;\n      }\n    }\n  }\n}\n\nexport function throttle<TSource>(\n  source: AsyncIterable<TSource>,\n  time: number\n): AsyncIterableX<TSource> {\n  return new ThrottleAsyncIterable<TSource>(source, time);\n}\n"]}