import { AsyncIterableX } from './asynciterablex';
export class BufferAsyncIterable extends AsyncIterableX {
    constructor(source, count, skip) {
        super();
        this._source = source;
        this._count = count;
        this._skip = skip;
    }
    async *[Symbol.asyncIterator]() {
        let buffers = [], i = 0;
        for await (let item of this._source) {
            if (i % this._skip === 0) {
                buffers.push([]);
            }
            for (let buffer of buffers) {
                buffer.push(item);
            }
            if (buffers.length > 0 && buffers[0].length === this._count) {
                yield buffers.shift();
            }
            i++;
        }
        while (buffers.length > 0) {
            yield buffers.shift();
        }
    }
}
export function buffer(source, count, skip) {
    if (skip == null) {
        skip = count;
    }
    return new BufferAsyncIterable(source, count, skip);
}

//# sourceMappingURL=buffer.mjs.map
