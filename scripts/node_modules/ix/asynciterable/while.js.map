{"version":3,"sources":["asynciterable/while.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAElD,MAAM,kBAA4B,SAAQ,+BAAuB;IAI/D,YAAY,SAA2C,EAAE,MAA8B;QACrF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,OAAO,MAAM,IAAI,CAAC,UAAU,EAAE,EAAE;YAC9B,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;gBACnC,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AAED,SAAgB,MAAM,CACpB,SAA2C,EAC3C,MAA8B;IAE9B,OAAO,IAAI,kBAAkB,CAAU,SAAS,EAAE,MAAM,CAAC,CAAC;AAC5D,CAAC;AALD,wBAKC","file":"while.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\nclass WhileAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _condition: () => boolean | Promise<boolean>;\n  private _source: AsyncIterable<TSource>;\n\n  constructor(condition: () => boolean | Promise<boolean>, source: AsyncIterable<TSource>) {\n    super();\n    this._condition = condition;\n    this._source = source;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    while (await this._condition()) {\n      for await (let item of this._source) {\n        yield item;\n      }\n    }\n  }\n}\n\nexport function _while<TSource>(\n  condition: () => boolean | Promise<boolean>,\n  source: AsyncIterable<TSource>\n): AsyncIterableX<TSource> {\n  return new WhileAsyncIterable<TSource>(condition, source);\n}\n"]}