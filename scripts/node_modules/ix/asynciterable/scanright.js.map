{"version":3,"sources":["asynciterable/scanright.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAClD,uCAAoC;AAEpC,MAAa,sBAA6B,SAAQ,+BAAiB;IAMjE,YACE,MAAwB,EACxB,EAAmD,EACnD,IAAS;QAET,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,QAAQ,GAAG,KAAK,EAClB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QACnB,MAAM,MAAM,GAAG,MAAM,iBAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3C,KAAK,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE;YAC1D,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YAC5B,IAAI,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAC1C,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAI,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;gBAC3C,MAAM,GAAG,CAAC;aACX;iBAAM;gBACL,GAAG,GAAG,IAAI,CAAC;gBACX,QAAQ,GAAG,IAAI,CAAC;aACjB;SACF;IACH,CAAC;CACF;AAjCD,wDAiCC;AAYD,SAAgB,SAAS,CACvB,MAAwB,EACxB,WAAwF,EACxF,GAAG,IAAS;IAEZ,OAAO,IAAI,sBAAsB,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;AAC/D,CAAC;AAND,8BAMC","file":"scanright.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { toArray } from './toarray';\n\nexport class ScanRightAsyncIterable<T, R> extends AsyncIterableX<R> {\n  private _source: AsyncIterable<T>;\n  private _fn: (acc: R, x: T, index: number) => R | Promise<R>;\n  private _seed?: T | R;\n  private _hasSeed: boolean;\n\n  constructor(\n    source: AsyncIterable<T>,\n    fn: (acc: R, x: T, index: number) => R | Promise<R>,\n    seed: R[]\n  ) {\n    super();\n    this._source = source;\n    this._fn = fn;\n    this._hasSeed = seed.length === 1;\n    this._seed = seed[0];\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let hasValue = false,\n      acc = this._seed;\n    const source = await toArray(this._source);\n    for (let offset = source.length - 1; offset >= 0; offset--) {\n      const item = source[offset];\n      if (hasValue || (hasValue = this._hasSeed)) {\n        acc = await this._fn(<R>acc, item, offset);\n        yield acc;\n      } else {\n        acc = item;\n        hasValue = true;\n      }\n    }\n  }\n}\n\nexport function scanRight<T, R = T>(\n  source: AsyncIterable<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  seed?: never[]\n): AsyncIterableX<R>;\nexport function scanRight<T, R = T>(\n  source: AsyncIterable<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  seed?: R\n): AsyncIterableX<R>;\nexport function scanRight<T, R = T>(\n  source: AsyncIterable<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  ...seed: R[]\n): AsyncIterableX<R> {\n  return new ScanRightAsyncIterable(source, accumulator, seed);\n}\n"]}