import { AsyncIterableX } from './asynciterablex';
import { create } from './create';
class SharedAsyncIterable extends AsyncIterableX {
    constructor(it) {
        super();
        this._it = it;
    }
    [Symbol.asyncIterator]() {
        return this._it;
    }
}
export function share(source, selector) {
    return selector
        ? create(async () => {
            const it = await selector(new SharedAsyncIterable(source[Symbol.asyncIterator]()));
            return it[Symbol.asyncIterator]();
        })
        : new SharedAsyncIterable(source[Symbol.asyncIterator]());
}

//# sourceMappingURL=share.mjs.map
