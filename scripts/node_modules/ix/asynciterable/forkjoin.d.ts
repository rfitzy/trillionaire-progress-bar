export declare function forkJoin<T, T2>(source: AsyncIterable<T>, source2: AsyncIterable<T2>): Promise<[T, T2] | undefined>;
export declare function forkJoin<T, T2, T3>(source: AsyncIterable<T>, source2: AsyncIterable<T2>, source3: AsyncIterable<T3>): Promise<[T, T2, T3] | undefined>;
export declare function forkJoin<T, T2, T3, T4>(source: AsyncIterable<T>, source2: AsyncIterable<T2>, source3: AsyncIterable<T3>, source4: AsyncIterable<T4>): Promise<[T, T2, T3, T4] | undefined>;
export declare function forkJoin<T, T2, T3, T4, T5>(source: AsyncIterable<T>, source2: AsyncIterable<T2>, source3: AsyncIterable<T3>, source4: AsyncIterable<T4>, source5: AsyncIterable<T5>): Promise<[T, T2, T3, T4, T5] | undefined>;
export declare function forkJoin<T, T2, T3, T4, T5, T6>(source: AsyncIterable<T>, source2: AsyncIterable<T2>, source3: AsyncIterable<T3>, source4: AsyncIterable<T4>, source5: AsyncIterable<T5>, source6: AsyncIterable<T6>): Promise<[T, T2, T3, T4, T5, T6] | undefined>;
export declare function forkJoin<T, R>(project: (values: [T]) => R | Promise<R>, source: AsyncIterable<T>): Promise<R | undefined>;
export declare function forkJoin<T, T2, R>(project: (values: [T, T2]) => R | Promise<R>, source: AsyncIterable<T>, source2: AsyncIterable<T2>): Promise<R | undefined>;
export declare function forkJoin<T, T2, T3, R>(project: (values: [T, T2, T3]) => R | Promise<R>, source: AsyncIterable<T>, source2: AsyncIterable<T2>, source3: AsyncIterable<T3>): Promise<R | undefined>;
export declare function forkJoin<T, T2, T3, T4, R>(project: (values: [T, T2, T3, T4]) => R | Promise<R>, source: AsyncIterable<T>, source2: AsyncIterable<T2>, source3: AsyncIterable<T3>, source4: AsyncIterable<T4>): Promise<R | undefined>;
export declare function forkJoin<T, T2, T3, T4, T5, R>(project: (values: [T, T2, T3, T4, T5]) => R | Promise<R>, source: AsyncIterable<T>, source2: AsyncIterable<T2>, source3: AsyncIterable<T3>, source4: AsyncIterable<T4>, source5: AsyncIterable<T5>): Promise<R | undefined>;
export declare function forkJoin<T, T2, T3, T4, T5, T6, R>(project: (values: [T, T2, T3, T4, T5, T6]) => R | Promise<R>, source: AsyncIterable<T>, source2: AsyncIterable<T2>, source3: AsyncIterable<T3>, source4: AsyncIterable<T4>, source5: AsyncIterable<T5>, source6: AsyncIterable<T6>): Promise<R | undefined>;
export declare function forkJoin<T>(...sources: AsyncIterable<T>[]): Promise<T[] | undefined>;
export declare function forkJoin<T, R>(project: (values: T[]) => R | Promise<R>, ...sources: AsyncIterable<T>[]): Promise<R | undefined>;
