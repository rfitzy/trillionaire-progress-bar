{"version":3,"sources":["asynciterable/concatall.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAElD,MAAa,sBAAgC,SAAQ,+BAAuB;IAG1E,YAAY,MAA6C;QACvD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,KAAK,EAAE,IAAI,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;YACpC,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,KAAK,EAAE;gBAC5B,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AAfD,wDAeC;AAED,SAAgB,SAAS,CACvB,MAA6C;IAE7C,OAAO,IAAI,sBAAsB,CAAU,MAAM,CAAC,CAAC;AACrD,CAAC;AAJD,8BAIC","file":"concatall.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\nexport class ConcatAllAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<AsyncIterable<TSource>>;\n\n  constructor(source: AsyncIterable<AsyncIterable<TSource>>) {\n    super();\n    this._source = source;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (let outer of this._source) {\n      for await (let item of outer) {\n        yield item;\n      }\n    }\n  }\n}\n\nexport function concatAll<TSource>(\n  source: AsyncIterable<AsyncIterable<TSource>>\n): AsyncIterableX<TSource> {\n  return new ConcatAllAsyncIterable<TSource>(source);\n}\n"]}