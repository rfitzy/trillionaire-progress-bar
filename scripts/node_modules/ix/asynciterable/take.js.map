{"version":3,"sources":["asynciterable/take.ts"],"names":[],"mappings":";;AAAA,qDAAkD;AAElD,MAAa,iBAA2B,SAAQ,+BAAuB;IAIrE,YAAY,MAA8B,EAAE,KAAa;QACvD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QACpB,IAAI,CAAC,GAAG,CAAC,EAAE;YACT,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;gBACnC,MAAM,IAAI,CAAC;gBACX,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE;oBACb,MAAM;iBACP;aACF;SACF;IACH,CAAC;CACF;AArBD,8CAqBC;AAED,SAAgB,IAAI,CAClB,MAA8B,EAC9B,KAAa;IAEb,OAAO,IAAI,iBAAiB,CAAU,MAAM,EAAE,KAAK,CAAC,CAAC;AACvD,CAAC;AALD,oBAKC","file":"take.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\n\nexport class TakeAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _count: number;\n\n  constructor(source: AsyncIterable<TSource>, count: number) {\n    super();\n    this._source = source;\n    this._count = count;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let i = this._count;\n    if (i > 0) {\n      for await (let item of this._source) {\n        yield item;\n        if (--i === 0) {\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function take<TSource>(\n  source: AsyncIterable<TSource>,\n  count: number\n): AsyncIterableX<TSource> {\n  return new TakeAsyncIterable<TSource>(source, count);\n}\n"]}