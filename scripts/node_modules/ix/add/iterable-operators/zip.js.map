{"version":3,"sources":["add/iterable-operators/zip.ts"],"names":[],"mappings":";;AAAA,wDAAqD;AACrD,4CAAyC;AA6EzC,SAAgB,QAAQ,CAA2B,GAAG,IAAW;IAC/D,IAAI,CAAC,IAAI,EAAE,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC;IAC9B,OAAO,GAAG,OAAO,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC;IAClF,OAAO,SAAG,CAAO,IAAI,EAAE,GAAG,OAAO,CAAiB,CAAC;AACrD,CAAC;AAJD,4BAIC;AAED,qBAAS,CAAC,SAAS,CAAC,GAAG,GAAG,QAAQ,CAAC","file":"zip.js","sourcesContent":["import { IterableX } from '../../iterable/iterablex';\nimport { zip } from '../../iterable/zip';\n\n/**\n * @ignore\n */\n\nexport function zipProto<T, T2>(this: IterableX<T>, source2: Iterable<T2>): IterableX<[T, T2]>;\nexport function zipProto<T, T2, T3>(\n  this: IterableX<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>\n): IterableX<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(\n  this: IterableX<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>\n): IterableX<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(\n  this: IterableX<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>\n): IterableX<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(\n  this: IterableX<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>,\n  source6: Iterable<T6>\n): IterableX<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipProto<T, R>(this: IterableX<T>, project: (values: [T]) => R): IterableX<R>;\nexport function zipProto<T, T2, R>(\n  this: IterableX<T>,\n  project: (values: [T, T2]) => R,\n  source2: Iterable<T2>\n): IterableX<R>;\nexport function zipProto<T, T2, T3, R>(\n  this: IterableX<T>,\n  project: (values: [T, T2, T3]) => R,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>\n): IterableX<R>;\nexport function zipProto<T, T2, T3, T4, R>(\n  this: IterableX<T>,\n  project: (values: [T, T2, T3, T4]) => R,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>\n): IterableX<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(\n  this: IterableX<T>,\n  project: (values: [T, T2, T3, T4, T5]) => R,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>\n): IterableX<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(\n  this: IterableX<T>,\n  project: (values: [T, T2, T3, T4, T5, T6]) => R,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>,\n  source6: Iterable<T6>\n): IterableX<R>;\n\nexport function zipProto<T>(this: IterableX<T>, ...sources: Iterable<T>[]): IterableX<T[]>;\nexport function zipProto<T, R>(\n  this: IterableX<T>,\n  project: (values: T[]) => R,\n  ...sources: Iterable<T>[]\n): IterableX<R>;\nexport function zipProto<T, R>(this: IterableX<T>, ...args: any[]): IterableX<R> {\n  let [arg1, ...sources] = args;\n  sources = typeof arg1 === 'function' ? [this, ...sources] : (arg1 = this) && args;\n  return zip<T, R>(arg1, ...sources) as IterableX<R>;\n}\n\nIterableX.prototype.zip = zipProto;\n\ndeclare module '../../iterable/iterablex' {\n  interface IterableX<T> {\n    zip: typeof zipProto;\n  }\n}\n"]}