{"version":3,"sources":["add/iterable-operators/reduce.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAY/C;;GAEG;AACH,MAAM,UAAU,WAAW,CAEzB,WAA2E,EAC3E,GAAG,IAAS;IAEZ,OAAO,MAAM,CAAC,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC;AAC5C,CAAC;AAED,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,WAAW,CAAC","file":"reduce.js","sourcesContent":["import { IterableX } from '../../iterable/iterablex';\nimport { reduce } from '../../iterable/reduce';\n\nexport function reduceProto<T, R = T>(\n  this: IterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: never[]\n): R;\nexport function reduceProto<T, R = T>(\n  this: IterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: R\n): R;\n/**\n * @ignore\n */\nexport function reduceProto<T, R = T>(\n  this: IterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  ...seed: R[]\n): R {\n  return reduce(this, accumulator, ...seed);\n}\n\nIterableX.prototype.reduce = reduceProto;\n\ndeclare module '../../iterable/iterablex' {\n  interface IterableX<T> {\n    reduce: typeof reduceProto;\n  }\n}\n"]}