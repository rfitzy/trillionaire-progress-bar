{"version":3,"sources":["add/iterable-operators/scan.ts"],"names":[],"mappings":";;AAAA,wDAAqD;AACrD,8CAA2C;AAY3C;;GAEG;AACH,SAAgB,SAAS,CAEvB,WAA2E,EAC3E,GAAG,IAAS;IAEZ,OAAO,WAAI,CAAC,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC;AAC1C,CAAC;AAND,8BAMC;AAED,qBAAS,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC","file":"scan.js","sourcesContent":["import { IterableX } from '../../iterable/iterablex';\nimport { scan } from '../../iterable/scan';\n\nexport function scanProto<T, R = T>(\n  this: IterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: never[]\n): IterableX<R>;\nexport function scanProto<T, R = T>(\n  this: IterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: R\n): IterableX<R>;\n/**\n * @ignore\n */\nexport function scanProto<T, R = T>(\n  this: IterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  ...seed: R[]\n): IterableX<R> {\n  return scan(this, accumulator, ...seed);\n}\n\nIterableX.prototype.scan = scanProto;\n\ndeclare module '../../iterable/iterablex' {\n  interface IterableX<T> {\n    scan: typeof scanProto;\n  }\n}\n"]}