{"version":3,"sources":["add/iterable-operators/reduceright.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAC;AAYzD;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAE9B,WAA2E,EAC3E,GAAG,IAAS;IAEZ,OAAO,WAAW,CAAC,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC;AACjD,CAAC;AAED,SAAS,CAAC,SAAS,CAAC,WAAW,GAAG,gBAAgB,CAAC","file":"reduceright.js","sourcesContent":["import { IterableX } from '../../iterable/iterablex';\nimport { reduceRight } from '../../iterable/reduceright';\n\nexport function reduceRightProto<T, R = T>(\n  this: IterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: never[]\n): R;\nexport function reduceRightProto<T, R = T>(\n  this: IterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: R\n): R;\n/**\n * @ignore\n */\nexport function reduceRightProto<T, R = T>(\n  this: IterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  ...seed: R[]\n): R {\n  return reduceRight(this, accumulator, ...seed);\n}\n\nIterableX.prototype.reduceRight = reduceRightProto;\n\ndeclare module '../../iterable/iterablex' {\n  interface IterableX<T> {\n    reduceRight: typeof reduceRightProto;\n  }\n}\n"]}