{"version":3,"sources":["add/asynciterable-operators/scan.ts"],"names":[],"mappings":";;AAAA,uEAAoE;AACpE,mDAAgD;AAYhD;;GAEG;AACH,SAAgB,SAAS,CAEvB,WAAwF,EACxF,GAAG,IAAS;IAEZ,OAAO,WAAI,CAAC,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC;AAC1C,CAAC;AAND,8BAMC;AAED,+BAAc,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC","file":"scan.js","sourcesContent":["import { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { scan } from '../../asynciterable/scan';\n\nexport function scanProto<T, R = T>(\n  this: AsyncIterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  seed?: never[]\n): AsyncIterableX<R>;\nexport function scanProto<T, R = T>(\n  this: AsyncIterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  seed?: R\n): AsyncIterableX<R>;\n/**\n * @ignore\n */\nexport function scanProto<T, R = T>(\n  this: AsyncIterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  ...seed: R[]\n): AsyncIterableX<R> {\n  return scan(this, accumulator, ...seed);\n}\n\nAsyncIterableX.prototype.scan = scanProto;\n\ndeclare module '../../asynciterable/asynciterablex' {\n  interface AsyncIterableX<T> {\n    scan: typeof scanProto;\n  }\n}\n"]}