{"version":3,"sources":["add/asynciterable-operators/reduceright.ts"],"names":[],"mappings":";;AAAA,uEAAoE;AACpE,iEAA8D;AAY9D;;GAEG;AACI,KAAK,UAAU,gBAAgB,CAEpC,WAAwF,EACxF,GAAG,IAAS;IAEZ,OAAO,yBAAW,CAAC,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC;AACjD,CAAC;AAND,4CAMC;AAED,+BAAc,CAAC,SAAS,CAAC,WAAW,GAAG,gBAAgB,CAAC","file":"reduceright.js","sourcesContent":["import { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { reduceRight } from '../../asynciterable/reduceright';\n\nexport async function reduceRightProto<T, R = T>(\n  this: AsyncIterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  seed?: never[]\n): Promise<R>;\nexport async function reduceRightProto<T, R = T>(\n  this: AsyncIterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  seed?: R\n): Promise<R>;\n/**\n * @ignore\n */\nexport async function reduceRightProto<T, R = T>(\n  this: AsyncIterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R | Promise<R>,\n  ...seed: R[]\n): Promise<R> {\n  return reduceRight(this, accumulator, ...seed);\n}\n\nAsyncIterableX.prototype.reduceRight = reduceRightProto;\n\ndeclare module '../../asynciterable/asynciterablex' {\n  interface AsyncIterableX<T> {\n    reduceRight: typeof reduceRightProto;\n  }\n}\n"]}