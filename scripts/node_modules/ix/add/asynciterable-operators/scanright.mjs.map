{"version":3,"sources":["add/asynciterable-operators/scanright.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AACpE,OAAO,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAY1D;;GAEG;AACH,MAAM,UAAU,cAAc,CAE5B,WAA2E,EAC3E,GAAG,IAAS;IAEZ,OAAO,SAAS,CAAC,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC;AAC/C,CAAC;AAED,cAAc,CAAC,SAAS,CAAC,SAAS,GAAG,cAAc,CAAC","file":"scanright.js","sourcesContent":["import { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { scanRight } from '../../asynciterable/scanright';\n\nexport function scanRightProto<T, R = T>(\n  this: AsyncIterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: never[]\n): AsyncIterableX<R>;\nexport function scanRightProto<T, R = T>(\n  this: AsyncIterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: R\n): AsyncIterableX<R>;\n/**\n * @ignore\n */\nexport function scanRightProto<T, R = T>(\n  this: AsyncIterableX<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  ...seed: R[]\n): AsyncIterableX<R> {\n  return scanRight(this, accumulator, ...seed);\n}\n\nAsyncIterableX.prototype.scanRight = scanRightProto;\n\ndeclare module '../../asynciterable/asynciterablex' {\n  interface AsyncIterableX<T> {\n    scanRight: typeof scanRightProto;\n  }\n}\n"]}