{"version":3,"sources":["iterable/pipe/except.ts"],"names":[],"mappings":";;AAEA,sCAA2C;AAC3C,sDAAsE;AAEtE,SAAgB,MAAM,CACpB,MAAyB,EACzB,WAAgD,mBAAe;IAE/D,OAAO,SAAS,sBAAsB,CAAC,KAAwB;QAC7D,OAAO,IAAI,uBAAc,CAAU,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC9D,CAAC,CAAC;AACJ,CAAC;AAPD,wBAOC","file":"except.js","sourcesContent":["import { MonoTypeOperatorFunction } from '../../interfaces';\nimport { IterableX } from '../../iterable/iterablex';\nimport { ExceptIterable } from '../except';\nimport { comparer as defaultComparer } from '../../internal/comparer';\n\nexport function except<TSource>(\n  second: Iterable<TSource>,\n  comparer: (x: TSource, y: TSource) => boolean = defaultComparer\n): MonoTypeOperatorFunction<TSource> {\n  return function exceptOperatorFunction(first: Iterable<TSource>): IterableX<TSource> {\n    return new ExceptIterable<TSource>(first, second, comparer);\n  };\n}\n"]}