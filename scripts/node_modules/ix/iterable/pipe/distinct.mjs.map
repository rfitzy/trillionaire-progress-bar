{"version":3,"sources":["iterable/pipe/distinct.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAC/C,OAAO,EAAE,QAAQ,EAAE,MAAM,yBAAyB,CAAC;AACnD,OAAO,EAAE,QAAQ,IAAI,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAEtE,MAAM,UAAU,QAAQ,CACtB,cAAwC,QAAQ,EAChD,WAA0C,eAAe;IAEzD,OAAO,SAAS,wBAAwB,CAAC,MAAyB;QAChE,OAAO,IAAI,gBAAgB,CAAgB,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC5E,CAAC,CAAC;AACJ,CAAC","file":"distinct.js","sourcesContent":["import { MonoTypeOperatorFunction } from '../../interfaces';\nimport { IterableX } from '../../iterable/iterablex';\nimport { DistinctIterable } from '../distinct';\nimport { identity } from '../../internal/identity';\nimport { comparer as defaultComparer } from '../../internal/comparer';\n\nexport function distinct<TSource, TKey>(\n  keySelector: (value: TSource) => TKey = identity,\n  comparer: (x: TKey, y: TKey) => boolean = defaultComparer\n): MonoTypeOperatorFunction<TSource> {\n  return function distinctOperatorFunction(source: Iterable<TSource>): IterableX<TSource> {\n    return new DistinctIterable<TSource, TKey>(source, keySelector, comparer);\n  };\n}\n"]}