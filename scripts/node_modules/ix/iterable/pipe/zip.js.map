{"version":3,"sources":["iterable/pipe/zip.ts"],"names":[],"mappings":";;AAEA,gCAAqC;AACrC,sDAAmD;AAiEnD,mCAAmC;AACnC,SAAgB,GAAG,CAAO,GAAG,OAAc;IACzC,OAAO,SAAS,mBAAmB,CAAC,MAAmB;QACrD,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,mBAAQ,CAAyB,CAAC;QAC/D,IAAI,EAAE,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;YAClC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACpB,EAAE,GAAG,mBAAQ,CAAC;SACf;QACD,OAAO,IAAI,iBAAW,CAAO,CAAC,MAAM,EAAE,GAAG,OAAO,CAAkB,EAAE,EAAE,CAAC,CAAC;IAC1E,CAAC,CAAC;AACJ,CAAC;AATD,kBASC","file":"zip.js","sourcesContent":["import { OperatorFunction } from '../../interfaces';\nimport { IterableX } from '../../iterable/iterablex';\nimport { ZipIterable } from '../zip';\nimport { identity } from '../../internal/identity';\n\nexport function zip<T, T2>(\n  source: Iterable<T>,\n  source2: Iterable<T2>\n): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(\n  source2: Iterable<T2>,\n  source3: Iterable<T3>\n): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>\n): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>\n): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>,\n  source6: Iterable<T6>\n): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;\n\nexport function zip<T, T2, R>(\n  project: (values: [T, T2]) => R,\n  source2: Iterable<T2>\n): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(\n  project: (values: [T, T2, T3]) => R,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>\n): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(\n  project: (values: [T, T2, T3, T4]) => R,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>\n): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(\n  project: (values: [T, T2, T3, T4, T5]) => R,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>\n): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(\n  project: (values: [T, T2, T3, T4, T5, T6]) => R,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>,\n  source6: Iterable<T6>\n): OperatorFunction<T, R>;\n\nexport function zip<T>(...sources: Iterable<T>[]): OperatorFunction<T, T[]>;\nexport function zip<T, R>(\n  project: (values: T[]) => R,\n  ...sources: Iterable<T>[]\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\nexport function zip<T, R>(...sources: any[]): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Iterable<T>): IterableX<R> {\n    let fn = (sources.shift() || identity) as (values: any[]) => R;\n    if (fn && typeof fn !== 'function') {\n      sources.unshift(fn);\n      fn = identity;\n    }\n    return new ZipIterable<T, R>([source, ...sources] as Iterable<T>[], fn);\n  };\n}\n"]}