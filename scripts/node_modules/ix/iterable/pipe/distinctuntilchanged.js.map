{"version":3,"sources":["iterable/pipe/distinctuntilchanged.ts"],"names":[],"mappings":";;AAEA,kEAAuE;AACvE,sDAAmD;AACnD,sDAAsE;AAEtE,SAAgB,oBAAoB,CAClC,cAAwC,mBAAQ,EAChD,WAAmD,mBAAe;IAElE,OAAO,SAAS,oCAAoC,CAClD,MAAyB;QAEzB,OAAO,IAAI,mDAA4B,CAAgB,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IACxF,CAAC,CAAC;AACJ,CAAC;AATD,oDASC","file":"distinctuntilchanged.js","sourcesContent":["import { MonoTypeOperatorFunction } from '../../interfaces';\nimport { IterableX } from '../../iterable/iterablex';\nimport { DistinctUntilChangedIterable } from '../distinctuntilchanged';\nimport { identity } from '../../internal/identity';\nimport { comparer as defaultComparer } from '../../internal/comparer';\n\nexport function distinctUntilChanged<TSource, TKey>(\n  keySelector: (value: TSource) => TKey = identity,\n  comparer: (first: TKey, second: TKey) => boolean = defaultComparer\n): MonoTypeOperatorFunction<TSource> {\n  return function distinctUntilChangedOperatorFunction(\n    source: Iterable<TSource>\n  ): IterableX<TSource> {\n    return new DistinctUntilChangedIterable<TSource, TKey>(source, keySelector, comparer);\n  };\n}\n"]}