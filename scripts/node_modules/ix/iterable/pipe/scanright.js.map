{"version":3,"sources":["iterable/pipe/scanright.ts"],"names":[],"mappings":";;AAEA,4CAAiD;AAUjD,SAAgB,SAAS,CACvB,WAA2E,EAC3E,GAAG,IAAS;IAEZ,OAAO,SAAS,yBAAyB,CAAC,MAAmB;QAC3D,OAAO,IAAI,6BAAiB,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC,CAAC;AACJ,CAAC;AAPD,8BAOC","file":"scanright.js","sourcesContent":["import { OperatorFunction } from '../../interfaces';\nimport { IterableX } from '../../iterable/iterablex';\nimport { ScanRightIterable } from '../scanright';\n\nexport function scanRight<T, R = T>(\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: never[]\n): OperatorFunction<T, R>;\nexport function scanRight<T, R = T>(\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: R\n): OperatorFunction<T, R>;\nexport function scanRight<T, R = T>(\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  ...seed: R[]\n): OperatorFunction<T, R> {\n  return function scanRightOperatorFunction(source: Iterable<T>): IterableX<R> {\n    return new ScanRightIterable(source, accumulator, seed);\n  };\n}\n"]}