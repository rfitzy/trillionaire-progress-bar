{"version":3,"sources":["iterable/pipe/distinctuntilchanged.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,4BAA4B,EAAE,MAAM,yBAAyB,CAAC;AACvE,OAAO,EAAE,QAAQ,EAAE,MAAM,yBAAyB,CAAC;AACnD,OAAO,EAAE,QAAQ,IAAI,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAEtE,MAAM,UAAU,oBAAoB,CAClC,cAAwC,QAAQ,EAChD,WAAmD,eAAe;IAElE,OAAO,SAAS,oCAAoC,CAClD,MAAyB;QAEzB,OAAO,IAAI,4BAA4B,CAAgB,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IACxF,CAAC,CAAC;AACJ,CAAC","file":"distinctuntilchanged.js","sourcesContent":["import { MonoTypeOperatorFunction } from '../../interfaces';\nimport { IterableX } from '../../iterable/iterablex';\nimport { DistinctUntilChangedIterable } from '../distinctuntilchanged';\nimport { identity } from '../../internal/identity';\nimport { comparer as defaultComparer } from '../../internal/comparer';\n\nexport function distinctUntilChanged<TSource, TKey>(\n  keySelector: (value: TSource) => TKey = identity,\n  comparer: (first: TKey, second: TKey) => boolean = defaultComparer\n): MonoTypeOperatorFunction<TSource> {\n  return function distinctUntilChangedOperatorFunction(\n    source: Iterable<TSource>\n  ): IterableX<TSource> {\n    return new DistinctUntilChangedIterable<TSource, TKey>(source, keySelector, comparer);\n  };\n}\n"]}