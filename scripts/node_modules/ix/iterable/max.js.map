{"version":3,"sources":["iterable/max.ts"],"names":[],"mappings":";;AAAA,mDAAgD;AAIhD,SAAgB,GAAG,CAAC,MAAqB,EAAE,KAAyB,mBAAQ;IAC1E,IAAI,WAAW,GAAG,KAAK,CAAC;IACxB,IAAI,KAAK,GAAG,CAAC,QAAQ,CAAC;IACtB,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;QACvB,IAAI,CAAC,WAAW,EAAE;YAChB,WAAW,GAAG,IAAI,CAAC;SACpB;QACD,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,KAAK,EAAE;YACb,KAAK,GAAG,CAAC,CAAC;SACX;KACF;IACD,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;KAClD;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAjBD,kBAiBC","file":"max.js","sourcesContent":["import { identity } from '../internal/identity';\n\nexport function max(source: Iterable<number>, fn?: (x: number) => number): number;\nexport function max<T>(source: Iterable<T>, fn: (x: T) => number): number;\nexport function max(source: Iterable<any>, fn: (x: any) => number = identity): number {\n  let atleastOnce = false;\n  let value = -Infinity;\n  for (let item of source) {\n    if (!atleastOnce) {\n      atleastOnce = true;\n    }\n    let x = fn(item);\n    if (x > value) {\n      value = x;\n    }\n  }\n  if (!atleastOnce) {\n    throw new Error('Sequence contains no elements');\n  }\n\n  return value;\n}\n"]}