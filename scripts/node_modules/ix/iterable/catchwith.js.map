{"version":3,"sources":["iterable/catchwith.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AACxC,+DAA4D;AAE5D,MAAa,iBAA2B,SAAQ,qBAAkB;IAIhE,YAAY,MAAyB,EAAE,OAA0C;QAC/E,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,GAAkC,EACpC,QAAQ,GAAG,KAAK,EAChB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QACvC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,GAA4B,EAAE,CAAC;YAEpC,IAAI;gBACF,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;gBACd,IAAI,CAAC,CAAC,IAAI,EAAE;oBACV,+BAAc,CAAC,EAAE,CAAC,CAAC;oBACnB,MAAM;iBACP;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACvB,QAAQ,GAAG,IAAI,CAAC;gBAChB,+BAAc,CAAC,EAAE,CAAC,CAAC;gBACnB,MAAM;aACP;YAED,MAAM,CAAC,CAAC,KAAK,CAAC;SACf;QAED,IAAI,QAAQ,EAAE;YACZ,KAAK,IAAI,IAAI,IAAI,GAAI,EAAE;gBACrB,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AAvCD,8CAuCC;AAED;;;;;;GAMG;AACH,SAAgB,SAAS,CACvB,MAAyB,EACzB,OAA0C;IAE1C,OAAO,IAAI,iBAAiB,CAAU,MAAM,EAAE,OAAO,CAAC,CAAC;AACzD,CAAC;AALD,8BAKC","file":"catchwith.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { returnIterator } from '../internal/returniterator';\n\nexport class CatchWithIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _handler: (error: any) => Iterable<TSource>;\n\n  constructor(source: Iterable<TSource>, handler: (error: any) => Iterable<TSource>) {\n    super();\n    this._source = source;\n    this._handler = handler;\n  }\n\n  *[Symbol.iterator]() {\n    let err: Iterable<TSource> | undefined,\n      hasError = false,\n      it = this._source[Symbol.iterator]();\n    while (1) {\n      let c = <IteratorResult<TSource>>{};\n\n      try {\n        c = it.next();\n        if (c.done) {\n          returnIterator(it);\n          break;\n        }\n      } catch (e) {\n        err = this._handler(e);\n        hasError = true;\n        returnIterator(it);\n        break;\n      }\n\n      yield c.value;\n    }\n\n    if (hasError) {\n      for (let item of err!) {\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * Creates a sequence that corresponds to the source sequence, concatenating it with the sequence resulting from\n * calling an exception handler function in case of an error.\n * @param {Iterable<TSource>} source Source sequence\n * @param {function(error: any): Iterable<TSource>} handler Handler to invoke when an exception of the specified type occurs.\n * @return {Iterable<TSource>} Source sequence, concatenated with an exception handler result sequence in case of an error.\n */\nexport function catchWith<TSource>(\n  source: Iterable<TSource>,\n  handler: (error: any) => Iterable<TSource>\n): IterableX<TSource> {\n  return new CatchWithIterable<TSource>(source, handler);\n}\n"]}