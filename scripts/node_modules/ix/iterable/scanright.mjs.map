{"version":3,"sources":["iterable/scanright.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,OAAO,iBAAwB,SAAQ,SAAY;IAMvD,YAAY,MAAmB,EAAE,EAAsC,EAAE,IAAS;QAChF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,QAAQ,GAAG,KAAK,EAClB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QACnB,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,KAAK,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE;YAC1D,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YAC5B,IAAI,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAC1C,GAAG,GAAG,IAAI,CAAC,GAAG,CAAI,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;gBACrC,MAAM,GAAG,CAAC;aACX;iBAAM;gBACL,GAAG,GAAG,IAAI,CAAC;gBACX,QAAQ,GAAG,IAAI,CAAC;aACjB;SACF;IACH,CAAC;CACF;AAYD,MAAM,UAAU,SAAS,CACvB,MAAmB,EACnB,WAA2E,EAC3E,GAAG,IAAS;IAEZ,OAAO,IAAI,iBAAiB,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;AAC1D,CAAC","file":"scanright.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { toArray } from './toarray';\n\nexport class ScanRightIterable<T, R> extends IterableX<R> {\n  private _source: Iterable<T>;\n  private _fn: (acc: R, x: T, index: number) => R;\n  private _seed?: T | R;\n  private _hasSeed: boolean;\n\n  constructor(source: Iterable<T>, fn: (acc: R, x: T, index: number) => R, seed: R[]) {\n    super();\n    this._source = source;\n    this._fn = fn;\n    this._hasSeed = seed.length === 1;\n    this._seed = seed[0];\n  }\n\n  *[Symbol.iterator]() {\n    let hasValue = false,\n      acc = this._seed;\n    const source = toArray(this._source);\n    for (let offset = source.length - 1; offset >= 0; offset--) {\n      const item = source[offset];\n      if (hasValue || (hasValue = this._hasSeed)) {\n        acc = this._fn(<R>acc, item, offset);\n        yield acc;\n      } else {\n        acc = item;\n        hasValue = true;\n      }\n    }\n  }\n}\n\nexport function scanRight<T, R = T>(\n  source: Iterable<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: never[]\n): IterableX<R>;\nexport function scanRight<T, R = T>(\n  source: Iterable<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  seed?: R\n): IterableX<R>;\nexport function scanRight<T, R = T>(\n  source: Iterable<T>,\n  accumulator: (previousValue: R, currentValue: T, currentIndex: number) => R,\n  ...seed: R[]\n): IterableX<R> {\n  return new ScanRightIterable(source, accumulator, seed);\n}\n"]}