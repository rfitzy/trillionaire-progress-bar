import { IterableX } from './iterablex';
export class PairwiseIterable extends IterableX {
    constructor(source) {
        super();
        this._source = source;
    }
    *[Symbol.iterator]() {
        let value, hasValue = false;
        for (const item of this._source) {
            if (!hasValue) {
                hasValue = true;
            }
            else {
                yield [value, item];
            }
            value = item;
        }
    }
}
/**
 * Returns a new sequence that triggers on the second and subsequent triggerings of the input sequence.
 * @param {Iterable<T>} source Source sequence.
 * @return {Iterable<T[]>} A sequence that triggers on successive pairs of iterations from the input sequence.
 */
export function pairwise(source) {
    return new PairwiseIterable(source);
}

//# sourceMappingURL=pairwise.mjs.map
