import { IterableX } from './iterablex';
export declare class CatchIterable<TSource> extends IterableX<TSource> {
    private _source;
    constructor(source: Iterable<Iterable<TSource>>);
    [Symbol.iterator](): IterableIterator<TSource>;
}
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @param {Iterable<Iterable<TSource>>} source Source sequences.
 * @return {Iterable<TSource>} Sequence that continues to concatenate source sequences while errors occur.
 */
export declare function _catchAll<TSource>(source: Iterable<Iterable<TSource>>): IterableX<TSource>;
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @param {Iterable<TSource>} source The first source.
 * @param {...Iterable<TSource>} args The rest of the sequence that continues to concatenate source sequences while errors occur.
 */
export declare function _catch<TSource>(source: Iterable<TSource>, ...args: Iterable<TSource>[]): IterableX<TSource>;
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @param {...Iterable<TSource>} source Sequence that continues to concatenate source sequences while errors occur.
 * @return {Iterable<TSource>} Sequence that continues to concatenate source sequences while errors occur.
 */
export declare function _catchStatic<TSource>(...source: Iterable<TSource>[]): IterableX<TSource>;
