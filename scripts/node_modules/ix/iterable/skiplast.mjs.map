{"version":3,"sources":["iterable/skiplast.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,MAAM,OAAO,gBAA0B,SAAQ,SAAkB;IAI/D,YAAY,MAAyB,EAAE,KAAa;QAClD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,CAAC,GAAG,EAAe,CAAC;QACxB,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC7B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACb,IAAI,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE;gBAC1B,MAAM,CAAC,CAAC,KAAK,EAAG,CAAC;aAClB;SACF;IACH,CAAC;CACF;AAED,MAAM,UAAU,QAAQ,CAAU,MAAyB,EAAE,KAAa;IACxE,OAAO,IAAI,gBAAgB,CAAU,MAAM,EAAE,KAAK,CAAC,CAAC;AACtD,CAAC","file":"skiplast.js","sourcesContent":["import { IterableX } from './iterablex';\n\nexport class SkipLastIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _count: number;\n\n  constructor(source: Iterable<TSource>, count: number) {\n    super();\n    this._source = source;\n    this._count = count;\n  }\n\n  *[Symbol.iterator]() {\n    let q = [] as TSource[];\n    for (let item of this._source) {\n      q.push(item);\n      if (q.length > this._count) {\n        yield q.shift()!;\n      }\n    }\n  }\n}\n\nexport function skipLast<TSource>(source: Iterable<TSource>, count: number): IterableX<TSource> {\n  return new SkipLastIterable<TSource>(source, count);\n}\n"]}