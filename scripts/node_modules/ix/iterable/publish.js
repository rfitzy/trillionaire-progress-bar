"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iterablex_1 = require("./iterablex");
const _refcountlist_1 = require("./_refcountlist");
const create_1 = require("./create");
class PublishedBuffer extends iterablex_1.IterableX {
    constructor(source) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = new _refcountlist_1.RefCountList(0);
    }
    *_getIterable(i) {
        try {
            while (1) {
                let hasValue = false, current = {};
                if (i >= this._buffer.count) {
                    if (!this._stopped) {
                        try {
                            let next = this._source.next();
                            hasValue = !next.done;
                            if (hasValue) {
                                current = next.value;
                            }
                        }
                        catch (e) {
                            this._error = e;
                            this._stopped = true;
                        }
                    }
                    if (this._stopped) {
                        if (this._error) {
                            throw this._error;
                        }
                        else {
                            break;
                        }
                    }
                    if (hasValue) {
                        this._buffer.push(current);
                    }
                }
                else {
                    hasValue = true;
                }
                if (hasValue) {
                    yield this._buffer.get(i);
                }
                else {
                    break;
                }
                i++;
            }
        }
        finally {
            this._buffer.done();
        }
    }
    [Symbol.iterator]() {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.iterator]();
    }
}
function publish(source, selector) {
    return selector
        ? create_1.create(() => selector(publish(source))[Symbol.iterator]())
        : new PublishedBuffer(source[Symbol.iterator]());
}
exports.publish = publish;

//# sourceMappingURL=publish.js.map
