import { IterableX } from './iterablex';
import { identity } from '../internal/identity';
import { arrayIndexOf } from '../internal/arrayindexof';
import { comparer as defaultComparer } from '../internal/comparer';
export class DistinctIterable extends IterableX {
    constructor(source, keySelector, cmp) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._cmp = cmp;
    }
    *[Symbol.iterator]() {
        let set = [];
        for (let item of this._source) {
            let key = this._keySelector(item);
            if (arrayIndexOf(set, key, this._cmp) === -1) {
                set.push(key);
                yield item;
            }
        }
    }
}
/**
 * Returns elements with a distinct key value by using the specified comparer to compare key values.
 * @param source Source sequence.
 * @param {function(value: TSource): TKey} [keySelector] Key selector.
 * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.
 * @return {Iterable<T>} Sequence that contains the elements from the source sequence with distinct key values.
 */
export function distinct(source, keySelector = identity, comparer = defaultComparer) {
    return new DistinctIterable(source, keySelector, comparer);
}

//# sourceMappingURL=distinct.mjs.map
