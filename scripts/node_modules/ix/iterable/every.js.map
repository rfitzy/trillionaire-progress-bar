{"version":3,"sources":["iterable/every.ts"],"names":[],"mappings":";;AAeA,SAAgB,KAAK,CACnB,MAAmB,EACnB,SAA+C;IAE/C,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;QACvB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE;YACzB,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAXD,sBAWC","file":"every.js","sourcesContent":["/**\n * Determines whether every element of a sequence satisfy a condition.\n * @param {Iterable<T>} source Source sequence.\n * @param {function(value: T, index: number): boolean} predicate A function to test each element for a condition.\n * @return {boolean} true if every element of the source sequence passes the test in the specified predicate, or\n * if the sequence is empty; otherwise, false.\n */\nexport function every<T, S extends T>(\n  source: Iterable<T>,\n  predicate: (value: T, index: number) => value is S\n): boolean;\nexport function every<T>(\n  source: Iterable<T>,\n  predicate: (value: T, index: number) => boolean\n): boolean;\nexport function every<T>(\n  source: Iterable<T>,\n  predicate: (value: T, index: number) => boolean\n): boolean {\n  let i = 0;\n  for (let item of source) {\n    if (!predicate(item, i++)) {\n      return false;\n    }\n  }\n  return true;\n}\n"]}