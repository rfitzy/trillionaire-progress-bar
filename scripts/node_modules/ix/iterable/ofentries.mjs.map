{"version":3,"sources":["iterable/ofentries.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAE5B,SAAS,SAAS,CAAkB,CAAS,EAAE,CAAU;IACvD,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChB,CAAC;AAED,MAAM,iBAA2B,SAAQ,SAA4B;IAGnE,YAAY,MAAkC;QAC5C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,CAAC,MAAM,CAAC,QAAQ,CAAC;QACf,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAC7E,MAAM,CAAC,QAAQ,CAChB,EAAE,CAAC;IACN,CAAC;CACF;AAED,MAAM,UAAU,SAAS,CAAU,MAElC;IACC,OAAO,IAAI,iBAAiB,CAAU,MAAM,CAAC,CAAC;AAChD,CAAC","file":"ofentries.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { map } from './map';\n\nfunction makeTuple<TFirst, TSecond>(x: TFirst, y: TSecond): [TFirst, TSecond] {\n  return [x, y];\n}\n\nclass OfEntriesIterable<TSource> extends IterableX<[string, TSource]> {\n  private _source: { [key: string]: TSource };\n\n  constructor(source: { [key: string]: TSource }) {\n    super();\n    this._source = source;\n  }\n\n  [Symbol.iterator]() {\n    return map(Object.keys(this._source), key => makeTuple(key, this._source[key]))[\n      Symbol.iterator\n    ]();\n  }\n}\n\nexport function ofEntries<TSource>(source: {\n  [key: string]: TSource;\n}): IterableX<[string, TSource]> {\n  return new OfEntriesIterable<TSource>(source);\n}\n"]}