{"version":3,"sources":["iterable/create.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AAExC,MAAM,iBAAqB,SAAQ,qBAAY;IAG7C,YAAY,EAAqB;QAC/B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAChB,CAAC;IAED,CAAC,MAAM,CAAC,QAAQ,CAAC;QACf,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC;IACpB,CAAC;CACF;AAED;;;;GAIG;AACH,SAAgB,MAAM,CAAI,WAA8B;IACtD,OAAO,IAAI,iBAAiB,CAAC,WAAW,CAAC,CAAC;AAC5C,CAAC;AAFD,wBAEC","file":"create.js","sourcesContent":["import { IterableX } from './iterablex';\n\nclass AnonymousIterable<T> extends IterableX<T> {\n  private _fn: () => Iterator<T>;\n\n  constructor(fn: () => Iterator<T>) {\n    super();\n    this._fn = fn;\n  }\n\n  [Symbol.iterator]() {\n    return this._fn();\n  }\n}\n\n/**\n * Creates an enumerable sequence based on an enumerator factory function.\n * @param {function(): Iterator<T>} getIterator The iterator factory function.\n * @return {Iterable<T>} Sequence that will invoke the iterator factory upon a call to [Symbol.iterator]().\n */\nexport function create<T>(getIterator: () => Iterator<T>): IterableX<T> {\n  return new AnonymousIterable(getIterator);\n}\n"]}