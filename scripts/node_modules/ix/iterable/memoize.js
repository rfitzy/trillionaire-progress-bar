"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iterablex_1 = require("./iterablex");
const _refcountlist_1 = require("./_refcountlist");
const create_1 = require("./create");
class MemoizeBuffer extends iterablex_1.IterableX {
    constructor(source, buffer) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = buffer;
    }
    *[Symbol.iterator]() {
        let i = 0;
        try {
            while (1) {
                let hasValue = false, current = {};
                if (i >= this._buffer.count) {
                    if (!this._stopped) {
                        try {
                            let next = this._source.next();
                            hasValue = !next.done;
                            if (hasValue) {
                                current = next.value;
                            }
                        }
                        catch (e) {
                            this._error = e;
                            this._stopped = true;
                        }
                    }
                    if (this._stopped) {
                        throw this._error;
                    }
                    if (hasValue) {
                        this._buffer.push(current);
                    }
                }
                else {
                    hasValue = true;
                }
                if (hasValue) {
                    yield this._buffer.get(i);
                }
                else {
                    break;
                }
                i++;
            }
        }
        finally {
            this._buffer.done();
        }
    }
}
function memoize(source, readerCount = -1, selector) {
    if (!selector) {
        return readerCount === -1
            ? new MemoizeBuffer(source[Symbol.iterator](), new _refcountlist_1.MaxRefCountList())
            : new MemoizeBuffer(source[Symbol.iterator](), new _refcountlist_1.RefCountList(readerCount));
    }
    return create_1.create(() => selector(memoize(source, readerCount))[Symbol.iterator]());
}
exports.memoize = memoize;

//# sourceMappingURL=memoize.js.map
