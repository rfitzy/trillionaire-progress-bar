import { IterableX } from './iterablex';
import { identity } from '../internal/identity';
import { comparer as defaultComparer } from '../internal/comparer';
export class DistinctUntilChangedIterable extends IterableX {
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    *[Symbol.iterator]() {
        let currentKey = {}, hasCurrentKey = false;
        for (let item of this._source) {
            let key = this._keySelector(item);
            let comparerEquals = false;
            if (hasCurrentKey) {
                comparerEquals = this._comparer(currentKey, key);
            }
            if (!hasCurrentKey || !comparerEquals) {
                hasCurrentKey = true;
                currentKey = key;
                yield item;
            }
        }
    }
}
/**
 * Returns consecutive distinct elements based on a key value by using the specified equality comparer to compare key values.
 * @param {Iterable<TSource>} source Source sequence.
 * @param {function(value: TSource): TKey} [keySelector] Key selector.
 * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.
 * @return {Iterable<TSource>} Sequence without adjacent non-distinct elements.
 */
export function distinctUntilChanged(source, keySelector = identity, comparer = defaultComparer) {
    return new DistinctUntilChangedIterable(source, keySelector, comparer);
}

//# sourceMappingURL=distinctuntilchanged.mjs.map
