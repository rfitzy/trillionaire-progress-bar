import { IterableX } from './iterablex';
export class FinallyIterable extends IterableX {
    constructor(source, action) {
        super();
        this._source = source;
        this._action = action;
    }
    *[Symbol.iterator]() {
        try {
            yield* this._source;
        }
        finally {
            this._action();
        }
    }
}
/**
 * Creates a sequence whose termination or disposal of an iterator causes a finally action to be executed.
 * @param {Iterator<T>} source Source sequence
 * @param {function(): void)} action Action to run upon termination of the sequence, or when an iterator is disposed.
 * @return {Iterable<T>} Source sequence with guarantees on the invocation of the finally action.
 */
export function _finally(source, action) {
    return new FinallyIterable(source, action);
}

//# sourceMappingURL=finally.mjs.map
