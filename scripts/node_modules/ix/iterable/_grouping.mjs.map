{"version":3,"sources":["iterable/_grouping.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM,UAAU,cAAc,CAC5B,MAAyB,EACzB,WAAqC,EACrC,eAA2C;IAE3C,IAAI,GAAG,GAAG,IAAI,GAAG,EAAkB,CAAC;IACpC,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;QACvB,IAAI,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACjB,QAAQ,GAAG,EAAE,CAAC;YACd,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;SACxB;QACD,QAAS,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;KACvC;IAED,OAAO,GAAG,CAAC;AACb,CAAC","file":"_grouping.js","sourcesContent":["/**\n * @ignore\n */\nexport function createGrouping<TSource, TKey, TValue>(\n  source: Iterable<TSource>,\n  keySelector: (value: TSource) => TKey,\n  elementSelector: (value: TSource) => TValue\n): Map<TKey, TValue[]> {\n  let map = new Map<TKey, TValue[]>();\n  for (let item of source) {\n    let key = keySelector(item);\n    let grouping = map.get(key);\n    if (!map.has(key)) {\n      grouping = [];\n      map.set(key, grouping);\n    }\n    grouping!.push(elementSelector(item));\n  }\n\n  return map;\n}\n"]}