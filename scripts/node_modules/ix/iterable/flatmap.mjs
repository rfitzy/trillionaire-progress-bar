import { IterableX } from './iterablex';
import { bindCallback } from '../internal/bindcallback';
export class FlatMapIterable extends IterableX {
    constructor(source, fn) {
        super();
        this._source = source;
        this._fn = fn;
    }
    *[Symbol.iterator]() {
        for (let outerItem of this._source) {
            for (let innerItem of this._fn(outerItem)) {
                yield innerItem;
            }
        }
    }
}
/**
 * Projects each element of a sequence to iterable and flattens the resulting sequences into
 * one sequence.
 * @param {Iterable<T>} source Source sequence
 * @param {function:(value: T): Iterable<R>} selector A transform function to apply to each element.
 * @param {Object} [thisArg] An optional "this" binding for the selector function.
 * @returns {Iterable<R>} An iterable whose elements are the result of invoking the one-to-many
 * transform function on each element of the input sequence.
 */
export function flatMap(source, selector, thisArg) {
    return new FlatMapIterable(source, bindCallback(selector, thisArg, 1));
}

//# sourceMappingURL=flatmap.mjs.map
