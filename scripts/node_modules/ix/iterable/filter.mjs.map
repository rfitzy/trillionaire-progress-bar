{"version":3,"sources":["iterable/filter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD,MAAM,OAAO,cAAwB,SAAQ,SAAkB;IAI7D,YAAY,MAAyB,EAAE,SAAqD;QAC1F,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC7B,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE;gBAC9B,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AAmBD,MAAM,UAAU,MAAM,CACpB,MAAmB,EACnB,SAA+C,EAC/C,OAAa;IAEb,OAAO,IAAI,cAAc,CAAI,MAAM,EAAE,YAAY,CAAC,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;AAC5E,CAAC","file":"filter.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { bindCallback } from '../internal/bindcallback';\n\nexport class FilterIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _predicate: (value: TSource, index: number) => boolean;\n\n  constructor(source: Iterable<TSource>, predicate: (value: TSource, index: number) => boolean) {\n    super();\n    this._source = source;\n    this._predicate = predicate;\n  }\n\n  *[Symbol.iterator]() {\n    let i = 0;\n    for (let item of this._source) {\n      if (this._predicate(item, i++)) {\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * Filters a sequence of values based on a predicate.\n * @param {Iterable<T>} source Source sequence.\n * @param {function(value: T, index: number): boolean} predicate A function to test each source element for a condition.\n * @param {Object} [thisArg] Value to use as this when executing callback.\n * @return {Iterable<T>} Sequence that contains elements from the input sequence that satisfy the condition.\n */\nexport function filter<T, S extends T>(\n  source: Iterable<T>,\n  predicate: (value: T, index: number) => value is S,\n  thisArg?: any\n): IterableX<S>;\nexport function filter<T>(\n  source: Iterable<T>,\n  predicate: (value: T, index: number) => boolean,\n  thisArg?: any\n): IterableX<T>;\nexport function filter<T>(\n  source: Iterable<T>,\n  predicate: (value: T, index: number) => boolean,\n  thisArg?: any\n): IterableX<T> {\n  return new FilterIterable<T>(source, bindCallback(predicate, thisArg, 2));\n}\n"]}