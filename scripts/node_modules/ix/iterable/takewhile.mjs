import { IterableX } from './iterablex';
export class TakeWhileIterable extends IterableX {
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    *[Symbol.iterator]() {
        let i = 0;
        for (let item of this._source) {
            if (!this._predicate(item, i++)) {
                break;
            }
            yield item;
        }
    }
}
export function takeWhile(source, predicate) {
    return new TakeWhileIterable(source, predicate);
}

//# sourceMappingURL=takewhile.mjs.map
