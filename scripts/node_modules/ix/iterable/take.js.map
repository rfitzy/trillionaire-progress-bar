{"version":3,"sources":["iterable/take.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AAExC,MAAa,YAAsB,SAAQ,qBAAkB;IAI3D,YAAY,MAAyB,EAAE,KAAa;QAClD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QACpB,IAAI,CAAC,GAAG,CAAC,EAAE;YACT,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;gBAC7B,MAAM,IAAI,CAAC;gBACX,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE;oBACb,MAAM;iBACP;aACF;SACF;IACH,CAAC;CACF;AArBD,oCAqBC;AAED,SAAgB,IAAI,CAAU,MAAyB,EAAE,KAAa;IACpE,OAAO,IAAI,YAAY,CAAU,MAAM,EAAE,KAAK,CAAC,CAAC;AAClD,CAAC;AAFD,oBAEC","file":"take.js","sourcesContent":["import { IterableX } from './iterablex';\n\nexport class TakeIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _count: number;\n\n  constructor(source: Iterable<TSource>, count: number) {\n    super();\n    this._source = source;\n    this._count = count;\n  }\n\n  *[Symbol.iterator]() {\n    let i = this._count;\n    if (i > 0) {\n      for (let item of this._source) {\n        yield item;\n        if (--i === 0) {\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function take<TSource>(source: Iterable<TSource>, count: number): IterableX<TSource> {\n  return new TakeIterable<TSource>(source, count);\n}\n"]}