import { IterableX } from './iterablex';
export declare class GroupedIterable<TKey, TValue> extends IterableX<TValue> {
    readonly key: TKey;
    private _source;
    constructor(key: TKey, source: Iterable<TValue>);
    [Symbol.iterator](): Iterator<TValue>;
}
export declare class GroupByIterable<TSource, TKey, TValue, TResult> extends IterableX<TResult> {
    private _source;
    private _keySelector;
    private _elementSelector;
    private _resultSelector;
    constructor(source: Iterable<TSource>, keySelector: (value: TSource) => TKey, elementSelector: (value: TSource) => TValue, resultSelector: (key: TKey, values: Iterable<TValue>) => TResult);
    [Symbol.iterator](): IterableIterator<TResult>;
}
export declare function groupByResultIdentity<TKey, TValue>(key: TKey, values: Iterable<TValue>): any;
export declare function groupBy<TSource, TKey>(source: Iterable<TSource>, keySelector: (value: TSource) => TKey): IterableX<GroupedIterable<TKey, TSource>>;
export declare function groupBy<TSource, TKey, TValue>(source: Iterable<TSource>, keySelector: (value: TSource) => TKey, elementSelector?: (value: TSource) => TValue): IterableX<GroupedIterable<TKey, TValue>>;
export declare function groupBy<TSource, TKey, TValue, TResult>(source: Iterable<TSource>, keySelector: (value: TSource) => TKey, elementSelector?: (value: TSource) => TValue, resultSelector?: (key: TKey, values: Iterable<TValue>) => TResult): IterableX<TResult>;
