{"version":3,"sources":["iterable/ignoreelements.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AAExC,MAAa,sBAAgC,SAAQ,qBAAkB;IAGrE,YAAY,MAAyB;QACnC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3C,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE;YACtB,yBAAyB;SAC1B;IACH,CAAC;CACF;AAdD,wDAcC;AAED,SAAgB,cAAc,CAAU,MAAyB;IAC/D,OAAO,IAAI,sBAAsB,CAAU,MAAM,CAAC,CAAC;AACrD,CAAC;AAFD,wCAEC","file":"ignoreelements.js","sourcesContent":["import { IterableX } from './iterablex';\n\nexport class IgnoreElementsIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n\n  constructor(source: Iterable<TSource>) {\n    super();\n    this._source = source;\n  }\n\n  *[Symbol.iterator](): Iterator<TSource> {\n    const it = this._source[Symbol.iterator]();\n    while (!it.next().done) {\n      /* intentionally empty */\n    }\n  }\n}\n\nexport function ignoreElements<TSource>(source: Iterable<TSource>): IterableX<TSource> {\n  return new IgnoreElementsIterable<TSource>(source);\n}\n"]}