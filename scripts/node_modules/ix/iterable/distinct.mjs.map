{"version":3,"sources":["iterable/distinct.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,QAAQ,IAAI,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEnE,MAAM,OAAO,gBAAgC,SAAQ,SAAkB;IAKrE,YACE,MAAyB,EACzB,WAAqC,EACrC,GAAkC;QAElC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IAClB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,GAAG,GAAG,EAAY,CAAC;QAEvB,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC7B,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAClC,IAAI,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC5C,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACd,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AAED;;;;;;GAMG;AACH,MAAM,UAAU,QAAQ,CACtB,MAAyB,EACzB,cAAwC,QAAQ,EAChD,WAA0C,eAAe;IAEzD,OAAO,IAAI,gBAAgB,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;AAC7D,CAAC","file":"distinct.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { identity } from '../internal/identity';\nimport { arrayIndexOf } from '../internal/arrayindexof';\nimport { comparer as defaultComparer } from '../internal/comparer';\n\nexport class DistinctIterable<TSource, TKey> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _keySelector: (value: TSource) => TKey;\n  private _cmp: (x: TKey, y: TKey) => boolean;\n\n  constructor(\n    source: Iterable<TSource>,\n    keySelector: (value: TSource) => TKey,\n    cmp: (x: TKey, y: TKey) => boolean\n  ) {\n    super();\n    this._source = source;\n    this._keySelector = keySelector;\n    this._cmp = cmp;\n  }\n\n  *[Symbol.iterator]() {\n    let set = [] as TKey[];\n\n    for (let item of this._source) {\n      let key = this._keySelector(item);\n      if (arrayIndexOf(set, key, this._cmp) === -1) {\n        set.push(key);\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * Returns elements with a distinct key value by using the specified comparer to compare key values.\n * @param source Source sequence.\n * @param {function(value: TSource): TKey} [keySelector] Key selector.\n * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.\n * @return {Iterable<T>} Sequence that contains the elements from the source sequence with distinct key values.\n */\nexport function distinct<TSource, TKey>(\n  source: Iterable<TSource>,\n  keySelector: (value: TSource) => TKey = identity,\n  comparer: (x: TKey, y: TKey) => boolean = defaultComparer\n): IterableX<TSource> {\n  return new DistinctIterable(source, keySelector, comparer);\n}\n"]}