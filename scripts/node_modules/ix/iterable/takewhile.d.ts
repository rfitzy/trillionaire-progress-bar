import { IterableX } from './iterablex';
export declare class TakeWhileIterable<TSource> extends IterableX<TSource> {
    private _source;
    private _predicate;
    constructor(source: Iterable<TSource>, predicate: (value: TSource, index: number) => boolean);
    [Symbol.iterator](): IterableIterator<TSource>;
}
export declare function takeWhile<T, S extends T>(source: Iterable<T>, predicate: (value: T, index: number) => value is S): IterableX<S>;
export declare function takeWhile<TSource>(source: Iterable<TSource>, predicate: (value: TSource, index: number) => boolean): IterableX<TSource>;
