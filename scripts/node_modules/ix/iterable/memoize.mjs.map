{"version":3,"sources":["iterable/memoize.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAiB,eAAe,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/E,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,MAAM,aAAiB,SAAQ,SAAY;IAMzC,YAAY,MAAmB,EAAE,MAAwB;QACvD,KAAK,EAAE,CAAC;QAHF,aAAQ,GAAY,KAAK,CAAC;QAIhC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI;YACF,OAAO,CAAC,EAAE;gBACR,IAAI,QAAQ,GAAG,KAAK,EAClB,OAAO,GAAM,EAAE,CAAC;gBAClB,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;oBAC3B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;wBAClB,IAAI;4BACF,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;4BAC/B,QAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;4BACtB,IAAI,QAAQ,EAAE;gCACZ,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;6BACtB;yBACF;wBAAC,OAAO,CAAC,EAAE;4BACV,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;4BAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;yBACtB;qBACF;oBAED,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACjB,MAAM,IAAI,CAAC,MAAM,CAAC;qBACnB;oBAED,IAAI,QAAQ,EAAE;wBACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBAC5B;iBACF;qBAAM;oBACL,QAAQ,GAAG,IAAI,CAAC;iBACjB;gBAED,IAAI,QAAQ,EAAE;oBACZ,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC3B;qBAAM;oBACL,MAAM;iBACP;gBAED,CAAC,EAAE,CAAC;aACL;SACF;gBAAS;YACR,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;SACrB;IACH,CAAC;CACF;AAUD,MAAM,UAAU,OAAO,CACrB,MAAyB,EACzB,cAAsB,CAAC,CAAC,EACxB,QAA0D;IAE1D,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,WAAW,KAAK,CAAC,CAAC;YACvB,CAAC,CAAC,IAAI,aAAa,CAAU,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,eAAe,EAAW,CAAC;YACvF,CAAC,CAAC,IAAI,aAAa,CACf,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EACzB,IAAI,YAAY,CAAU,WAAW,CAAC,CACvC,CAAC;KACP;IACD,OAAO,MAAM,CAAoB,GAAG,EAAE,CACpC,QAAS,CAAC,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAC3D,CAAC;AACJ,CAAC","file":"memoize.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { IRefCountList, MaxRefCountList, RefCountList } from './_refcountlist';\nimport { create } from './create';\n\nclass MemoizeBuffer<T> extends IterableX<T> {\n  private _source: Iterator<T>;\n  private _buffer: IRefCountList<T>;\n  private _error: any;\n  private _stopped: boolean = false;\n\n  constructor(source: Iterator<T>, buffer: IRefCountList<T>) {\n    super();\n    this._source = source;\n    this._buffer = buffer;\n  }\n\n  *[Symbol.iterator]() {\n    let i = 0;\n    try {\n      while (1) {\n        let hasValue = false,\n          current = <T>{};\n        if (i >= this._buffer.count) {\n          if (!this._stopped) {\n            try {\n              let next = this._source.next();\n              hasValue = !next.done;\n              if (hasValue) {\n                current = next.value;\n              }\n            } catch (e) {\n              this._error = e;\n              this._stopped = true;\n            }\n          }\n\n          if (this._stopped) {\n            throw this._error;\n          }\n\n          if (hasValue) {\n            this._buffer.push(current);\n          }\n        } else {\n          hasValue = true;\n        }\n\n        if (hasValue) {\n          yield this._buffer.get(i);\n        } else {\n          break;\n        }\n\n        i++;\n      }\n    } finally {\n      this._buffer.done();\n    }\n  }\n}\nexport function memoize<TSource>(\n  source: Iterable<TSource>,\n  readerCount?: number\n): IterableX<TSource>;\nexport function memoize<TSource, TResult>(\n  source: Iterable<TSource>,\n  readerCount?: number,\n  selector?: (value: Iterable<TSource>) => Iterable<TResult>\n): IterableX<TResult>;\nexport function memoize<TSource, TResult = TSource>(\n  source: Iterable<TSource>,\n  readerCount: number = -1,\n  selector?: (value: Iterable<TSource>) => Iterable<TResult>\n): IterableX<TSource | TResult> {\n  if (!selector) {\n    return readerCount === -1\n      ? new MemoizeBuffer<TSource>(source[Symbol.iterator](), new MaxRefCountList<TSource>())\n      : new MemoizeBuffer<TSource>(\n          source[Symbol.iterator](),\n          new RefCountList<TSource>(readerCount)\n        );\n  }\n  return create<TSource | TResult>(() =>\n    selector!(memoize(source, readerCount))[Symbol.iterator]()\n  );\n}\n"]}