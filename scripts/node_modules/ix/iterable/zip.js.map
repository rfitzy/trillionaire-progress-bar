{"version":3,"sources":["iterable/zip.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AACxC,mDAAgD;AAChD,+DAA4D;AAE5D,MAAa,WAA8B,SAAQ,qBAAkB;IAInE,YAAY,OAA4B,EAAE,EAA8B;QACtE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAChB,CAAC;IACD,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC3C,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACzD,OAAO,aAAa,GAAG,CAAC,EAAE;YACxB,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;YACxC,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,EAAE,KAAK,GAAG,aAAa,GAAI;gBAC9C,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;gBACjC,IAAI,MAAM,CAAC,IAAI,EAAE;oBACf,GAAG,CAAC,OAAO,CAAC,+BAAc,CAAC,CAAC;oBAC5B,OAAO,SAAS,CAAC;iBAClB;gBACD,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;aAC9B;YACD,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC;SAClB;IACH,CAAC;CACF;AA1BD,kCA0BC;AAqED,mCAAmC;AACnC,SAAgB,GAAG,CAAO,GAAG,OAAc;IACzC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,mBAAQ,CAAyB,CAAC;IAC/D,IAAI,EAAE,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;QAClC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpB,EAAE,GAAG,mBAAQ,CAAC;KACf;IACD,OAAO,IAAI,WAAW,CAAO,OAAwB,EAAE,EAAE,CAAC,CAAC;AAC7D,CAAC;AAPD,kBAOC","file":"zip.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { identity } from '../internal/identity';\nimport { returnIterator } from '../internal/returniterator';\n\nexport class ZipIterable<TSource, TResult> extends IterableX<TResult> {\n  private _sources: Iterable<TSource>[];\n  private _fn: (values: any[]) => TResult;\n\n  constructor(sources: Iterable<TSource>[], fn: (values: any[]) => TResult) {\n    super();\n    this._sources = sources;\n    this._fn = fn;\n  }\n  *[Symbol.iterator](): IterableIterator<TResult> {\n    const fn = this._fn;\n    const sourcesLength = this._sources.length;\n    const its = this._sources.map(x => x[Symbol.iterator]());\n    while (sourcesLength > 0) {\n      const values = new Array(sourcesLength);\n      for (let index = -1; ++index < sourcesLength; ) {\n        const result = its[index].next();\n        if (result.done) {\n          its.forEach(returnIterator);\n          return undefined;\n        }\n        values[index] = result.value;\n      }\n      yield fn(values);\n    }\n  }\n}\n\nexport function zip<T, T2>(source: Iterable<T>, source2: Iterable<T2>): IterableX<[T, T2]>;\nexport function zip<T, T2, T3>(\n  source: Iterable<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>\n): IterableX<[T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(\n  source: Iterable<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>\n): IterableX<[T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(\n  source: Iterable<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>\n): IterableX<[T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(\n  source: Iterable<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>,\n  source6: Iterable<T6>\n): IterableX<[T, T2, T3, T4, T5, T6]>;\n\nexport function zip<T, R>(project: (values: [T]) => R, source: Iterable<T>): IterableX<R>;\nexport function zip<T, T2, R>(\n  project: (values: [T, T2]) => R,\n  source: Iterable<T>,\n  source2: Iterable<T2>\n): IterableX<R>;\nexport function zip<T, T2, T3, R>(\n  project: (values: [T, T2, T3]) => R,\n  source: Iterable<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>\n): IterableX<R>;\nexport function zip<T, T2, T3, T4, R>(\n  project: (values: [T, T2, T3, T4]) => R,\n  source: Iterable<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>\n): IterableX<R>;\nexport function zip<T, T2, T3, T4, T5, R>(\n  project: (values: [T, T2, T3, T4, T5]) => R,\n  source: Iterable<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>\n): IterableX<R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(\n  project: (values: [T, T2, T3, T4, T5, T6]) => R,\n  source: Iterable<T>,\n  source2: Iterable<T2>,\n  source3: Iterable<T3>,\n  source4: Iterable<T4>,\n  source5: Iterable<T5>,\n  source6: Iterable<T6>\n): IterableX<R>;\n\nexport function zip<T>(...sources: Iterable<T>[]): IterableX<T[]>;\nexport function zip<T, R>(project: (values: T[]) => R, ...sources: Iterable<T>[]): IterableX<R>;\n/* tslint:enable:max-line-length */\nexport function zip<T, R>(...sources: any[]): IterableX<R> {\n  let fn = (sources.shift() || identity) as (values: any[]) => R;\n  if (fn && typeof fn !== 'function') {\n    sources.unshift(fn);\n    fn = identity;\n  }\n  return new ZipIterable<T, R>(sources as Iterable<T>[], fn);\n}\n"]}