import { IterableX } from './iterablex';
export class OnErrorResumeNextIterable extends IterableX {
    constructor(source) {
        super();
        this._source = source;
    }
    *[Symbol.iterator]() {
        for (let item of this._source) {
            let it = item[Symbol.iterator]();
            while (1) {
                let next;
                try {
                    next = it.next();
                }
                catch (e) {
                    break;
                }
                if (next.done) {
                    break;
                }
                yield next.value;
            }
        }
    }
}
export function onErrorResumeNext(source, ...args) {
    return new OnErrorResumeNextIterable([source, ...args]);
}
export function onErrorResumeNextStatic(...source) {
    return new OnErrorResumeNextIterable(source);
}

//# sourceMappingURL=onerrorresumenext.mjs.map
