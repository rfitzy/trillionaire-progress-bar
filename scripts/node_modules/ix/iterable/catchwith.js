"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iterablex_1 = require("./iterablex");
const returniterator_1 = require("../internal/returniterator");
class CatchWithIterable extends iterablex_1.IterableX {
    constructor(source, handler) {
        super();
        this._source = source;
        this._handler = handler;
    }
    *[Symbol.iterator]() {
        let err, hasError = false, it = this._source[Symbol.iterator]();
        while (1) {
            let c = {};
            try {
                c = it.next();
                if (c.done) {
                    returniterator_1.returnIterator(it);
                    break;
                }
            }
            catch (e) {
                err = this._handler(e);
                hasError = true;
                returniterator_1.returnIterator(it);
                break;
            }
            yield c.value;
        }
        if (hasError) {
            for (let item of err) {
                yield item;
            }
        }
    }
}
exports.CatchWithIterable = CatchWithIterable;
/**
 * Creates a sequence that corresponds to the source sequence, concatenating it with the sequence resulting from
 * calling an exception handler function in case of an error.
 * @param {Iterable<TSource>} source Source sequence
 * @param {function(error: any): Iterable<TSource>} handler Handler to invoke when an exception of the specified type occurs.
 * @return {Iterable<TSource>} Source sequence, concatenated with an exception handler result sequence in case of an error.
 */
function catchWith(source, handler) {
    return new CatchWithIterable(source, handler);
}
exports.catchWith = catchWith;

//# sourceMappingURL=catchwith.js.map
