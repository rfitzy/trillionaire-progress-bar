import { IterableX } from './iterablex';
export class DefaultIfEmptyIterable extends IterableX {
    constructor(source, defaultValue) {
        super();
        this._source = source;
        this._defaultValue = defaultValue;
    }
    *[Symbol.iterator]() {
        let state = 1;
        for (let item of this._source) {
            state = 2;
            yield item;
        }
        if (state === 1) {
            yield this._defaultValue;
        }
    }
}
/**
 * Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
 * @param {Iterable<T>} source The sequence to return a default value for if it is empty.
 * @param {T} defaultValue The default value if the sequence is empty.
 * @return An that contains the default value if source is empty; otherwise, source.
 */
export function defaultIfEmpty(source, defaultValue) {
    return new DefaultIfEmptyIterable(source, defaultValue);
}

//# sourceMappingURL=defaultifempty.mjs.map
