"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iterablex_1 = require("./iterablex");
const identity_1 = require("../internal/identity");
const arrayindexof_1 = require("../internal/arrayindexof");
const comparer_1 = require("../internal/comparer");
class DistinctIterable extends iterablex_1.IterableX {
    constructor(source, keySelector, cmp) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._cmp = cmp;
    }
    *[Symbol.iterator]() {
        let set = [];
        for (let item of this._source) {
            let key = this._keySelector(item);
            if (arrayindexof_1.arrayIndexOf(set, key, this._cmp) === -1) {
                set.push(key);
                yield item;
            }
        }
    }
}
exports.DistinctIterable = DistinctIterable;
/**
 * Returns elements with a distinct key value by using the specified comparer to compare key values.
 * @param source Source sequence.
 * @param {function(value: TSource): TKey} [keySelector] Key selector.
 * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.
 * @return {Iterable<T>} Sequence that contains the elements from the source sequence with distinct key values.
 */
function distinct(source, keySelector = identity_1.identity, comparer = comparer_1.comparer) {
    return new DistinctIterable(source, keySelector, comparer);
}
exports.distinct = distinct;

//# sourceMappingURL=distinct.js.map
