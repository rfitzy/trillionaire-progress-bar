{"version":3,"sources":["iterable/for.ts"],"names":[],"mappings":";;AACA,2CAAwC;AACxC,+BAA4B;AAE5B;;;;;;;;;GASG;AACH,SAAgB,IAAI,CAClB,MAAyB,EACzB,cAAqD;IAErD,OAAO,qBAAS,CAAC,SAAG,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC;AAChD,CAAC;AALD,oBAKC","file":"for.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { concatAll } from './concatall';\nimport { map } from './map';\n\n/**\n * Concatenates the iterable sequences obtained by running the result selector for each\n * element in the given source sequence.\n * @param {Iterable<T>} source Iterable source for which each element will be mapped onto an\n * iterable source that will be concatenated in the result sequence.\n * @param {function:(value: T) => Iterable<R>} resultSelector Function to select an iterable source\n * for each element in the source sequence.\n * @returns {Iterable<R>} The iterable sequence obtained by concatenating the sources returned by\n * result selector for each element in the source.\n */\nexport function _for<TSource, TResult>(\n  source: Iterable<TSource>,\n  resultSelector: (value: TSource) => Iterable<TResult>\n): IterableX<TResult> {\n  return concatAll(map(source, resultSelector));\n}\n"]}