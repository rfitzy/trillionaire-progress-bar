import { IterableX } from './iterablex';
export class RepeatIterable extends IterableX {
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    *[Symbol.iterator]() {
        if (this._count === -1) {
            while (1) {
                for (let item of this._source) {
                    yield item;
                }
            }
        }
        else {
            for (let i = 0; i < this._count; i++) {
                for (let item of this._source) {
                    yield item;
                }
            }
        }
    }
}
export function repeat(source, count = -1) {
    return new RepeatIterable(source, count);
}
export function repeatStatic(value, count = -1) {
    return new RepeatIterable(IterableX.of(value), count);
}

//# sourceMappingURL=repeat.mjs.map
