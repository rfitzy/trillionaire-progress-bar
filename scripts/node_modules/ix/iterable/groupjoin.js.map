{"version":3,"sources":["iterable/groupjoin.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AACxC,2CAA6C;AAC7C,mCAAgC;AAChC,mDAAgD;AAEhD,MAAa,iBAAiD,SAAQ,qBAAkB;IAOtF,YACE,KAAuB,EACvB,KAAuB,EACvB,aAAsC,EACtC,aAAsC,EACtC,cAAmE;QAEnE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACxC,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,MAAM,GAAG,GAAG,0BAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,mBAAQ,CAAC,CAAC;QACvE,KAAK,IAAI,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE;YACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YACnD,MAAM,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC;gBACrC,CAAC,CAAmB,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC;gBACrC,CAAC,CAAC,aAAK,EAAU,CAAC;YACpB,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;SACzD;IACH,CAAC;CACF;AAhCD,8CAgCC;AAED,SAAgB,SAAS,CACvB,KAAuB,EACvB,KAAuB,EACvB,aAAsC,EACtC,aAAsC,EACtC,cAAmE;IAEnE,OAAO,IAAI,iBAAiB,CAC1B,KAAK,EACL,KAAK,EACL,aAAa,EACb,aAAa,EACb,cAAc,CACf,CAAC;AACJ,CAAC;AAdD,8BAcC","file":"groupjoin.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { createGrouping } from './_grouping';\nimport { empty } from './empty';\nimport { identity } from '../internal/identity';\n\nexport class GroupJoinIterable<TOuter, TInner, TKey, TResult> extends IterableX<TResult> {\n  private _outer: Iterable<TOuter>;\n  private _inner: Iterable<TInner>;\n  private _outerSelector: (value: TOuter) => TKey;\n  private _innerSelector: (value: TInner) => TKey;\n  private _resultSelector: (outer: TOuter, inner: Iterable<TInner>) => TResult;\n\n  constructor(\n    outer: Iterable<TOuter>,\n    inner: Iterable<TInner>,\n    outerSelector: (value: TOuter) => TKey,\n    innerSelector: (value: TInner) => TKey,\n    resultSelector: (outer: TOuter, inner: Iterable<TInner>) => TResult\n  ) {\n    super();\n    this._outer = outer;\n    this._inner = inner;\n    this._outerSelector = outerSelector;\n    this._innerSelector = innerSelector;\n    this._resultSelector = resultSelector;\n  }\n\n  *[Symbol.iterator]() {\n    const map = createGrouping(this._inner, this._innerSelector, identity);\n    for (let outerElement of this._outer) {\n      const outerKey = this._outerSelector(outerElement);\n      const innerElements = map.has(outerKey)\n        ? <Iterable<TInner>>map.get(outerKey)\n        : empty<TInner>();\n      yield this._resultSelector(outerElement, innerElements);\n    }\n  }\n}\n\nexport function groupJoin<TOuter, TInner, TKey, TResult>(\n  outer: Iterable<TOuter>,\n  inner: Iterable<TInner>,\n  outerSelector: (value: TOuter) => TKey,\n  innerSelector: (value: TInner) => TKey,\n  resultSelector: (outer: TOuter, inner: Iterable<TInner>) => TResult\n): IterableX<TResult> {\n  return new GroupJoinIterable<TOuter, TInner, TKey, TResult>(\n    outer,\n    inner,\n    outerSelector,\n    innerSelector,\n    resultSelector\n  );\n}\n"]}