{"version":3,"sources":["iterable/tomap.ts"],"names":[],"mappings":";;AASA,SAAgB,KAAK,CACnB,MAAyB,EACzB,WAAoC,EACpC,eAA6C;IAE7C,IAAI,GAAG,GAAG,IAAI,GAAG,EAA4B,CAAC;IAC9C,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;QACvB,IAAI,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC3D,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;KACnC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAXD,sBAWC","file":"tomap.js","sourcesContent":["export function toMap<TSource, TKey>(\n  source: Iterable<TSource>,\n  keySelector: (item: TSource) => TKey\n): Map<TKey, TSource>;\nexport function toMap<TSource, TKey, TElement = TSource>(\n  source: Iterable<TSource>,\n  keySelector: (item: TSource) => TKey,\n  elementSelector?: (item: TSource) => TElement\n): Map<TKey, TElement>;\nexport function toMap<TSource, TKey, TElement = TSource>(\n  source: Iterable<TSource>,\n  keySelector: (item: TSource) => TKey,\n  elementSelector?: (item: TSource) => TElement\n): Map<TKey, TElement | TSource> {\n  let map = new Map<TKey, TElement | TSource>();\n  for (let item of source) {\n    let value = elementSelector ? elementSelector(item) : item;\n    map.set(keySelector(item), value);\n  }\n  return map;\n}\n"]}