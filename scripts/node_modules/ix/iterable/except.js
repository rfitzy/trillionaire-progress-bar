"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iterablex_1 = require("./iterablex");
const arrayindexof_1 = require("../internal/arrayindexof");
const comparer_1 = require("../internal/comparer");
class ExceptIterable extends iterablex_1.IterableX {
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    *[Symbol.iterator]() {
        let map = [];
        for (let secondItem of this._second) {
            map.push(secondItem);
        }
        for (let firstItem of this._first) {
            if (arrayindexof_1.arrayIndexOf(map, firstItem, this._comparer) === -1) {
                map.push(firstItem);
                yield firstItem;
            }
        }
    }
}
exports.ExceptIterable = ExceptIterable;
/**
 * Produces the set difference of two sequences by using the an equality comparer to compare values.
 * @param {Iterable<T>} first A sequence whose elements that are not also in second will be returned.
 * @param {Iterable<T>} second A sequence whose elements that also occur in the first sequence will cause those
 * elements to be removed from the returned sequence.
 * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.
 * @return {Iterable<T>} A sequence that contains the set difference of the elements of two sequences.
 */
function except(first, second, comparer = comparer_1.comparer) {
    return new ExceptIterable(first, second, comparer);
}
exports.except = except;

//# sourceMappingURL=except.js.map
