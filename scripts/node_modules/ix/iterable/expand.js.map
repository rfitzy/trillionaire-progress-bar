{"version":3,"sources":["iterable/expand.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AAExC,MAAa,cAAwB,SAAQ,qBAAkB;IAI7D,YAAY,MAAyB,EAAE,EAAyC;QAC9E,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAChB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,IAAI,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;YACpB,KAAK,IAAI,IAAI,IAAI,GAAI,EAAE;gBACrB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBACvB,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AApBD,wCAoBC;AAED;;;;;GAKG;AACH,SAAgB,MAAM,CACpB,MAAyB,EACzB,QAA+C;IAE/C,OAAO,IAAI,cAAc,CAAU,MAAM,EAAE,QAAQ,CAAC,CAAC;AACvD,CAAC;AALD,wBAKC","file":"expand.js","sourcesContent":["import { IterableX } from './iterablex';\n\nexport class ExpandIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _fn: (value: TSource) => Iterable<TSource>;\n\n  constructor(source: Iterable<TSource>, fn: (value: TSource) => Iterable<TSource>) {\n    super();\n    this._source = source;\n    this._fn = fn;\n  }\n\n  *[Symbol.iterator]() {\n    let q = [this._source];\n    while (q.length > 0) {\n      let src = q.shift();\n      for (let item of src!) {\n        q.push(this._fn(item));\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * Expands the sequence by recursively applying a selector function.\n * @param {Iterable<T>} source Source sequence.\n * @param {function(value: T): Iterable<T>} selector Selector function to retrieve the next sequence to expand\n * @return {Iterable<T>} Sequence with results from the recursive expansion of the source sequence.\n */\nexport function expand<TSource>(\n  source: Iterable<TSource>,\n  selector: (value: TSource) => Iterable<TSource>\n): IterableX<TSource> {\n  return new ExpandIterable<TSource>(source, selector);\n}\n"]}