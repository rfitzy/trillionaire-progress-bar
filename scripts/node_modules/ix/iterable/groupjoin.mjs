import { IterableX } from './iterablex';
import { createGrouping } from './_grouping';
import { empty } from './empty';
import { identity } from '../internal/identity';
export class GroupJoinIterable extends IterableX {
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    *[Symbol.iterator]() {
        const map = createGrouping(this._inner, this._innerSelector, identity);
        for (let outerElement of this._outer) {
            const outerKey = this._outerSelector(outerElement);
            const innerElements = map.has(outerKey)
                ? map.get(outerKey)
                : empty();
            yield this._resultSelector(outerElement, innerElements);
        }
    }
}
export function groupJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new GroupJoinIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}

//# sourceMappingURL=groupjoin.mjs.map
