{"version":3,"sources":["iterable/reverse.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AAExC,MAAa,eAAyB,SAAQ,qBAAkB;IAG9D,YAAY,MAAyB;QACnC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,OAAO,GAAG,EAAe,CAAC;QAC9B,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC7B,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACvB;QACD,KAAK,CAAC,CAAC,OAAO,CAAC;IACjB,CAAC;CACF;AAfD,0CAeC;AAED,SAAgB,OAAO,CAAU,MAAyB;IACxD,OAAO,IAAI,eAAe,CAAU,MAAM,CAAC,CAAC;AAC9C,CAAC;AAFD,0BAEC","file":"reverse.js","sourcesContent":["import { IterableX } from './iterablex';\n\nexport class ReverseIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n\n  constructor(source: Iterable<TSource>) {\n    super();\n    this._source = source;\n  }\n\n  *[Symbol.iterator]() {\n    let results = [] as TSource[];\n    for (let item of this._source) {\n      results.unshift(item);\n    }\n    yield* results;\n  }\n}\n\nexport function reverse<TSource>(source: Iterable<TSource>): IterableX<TSource> {\n  return new ReverseIterable<TSource>(source);\n}\n"]}