import { IterableX } from './iterablex';
export declare class CatchWithIterable<TSource> extends IterableX<TSource> {
    private _source;
    private _handler;
    constructor(source: Iterable<TSource>, handler: (error: any) => Iterable<TSource>);
    [Symbol.iterator](): IterableIterator<TSource>;
}
/**
 * Creates a sequence that corresponds to the source sequence, concatenating it with the sequence resulting from
 * calling an exception handler function in case of an error.
 * @param {Iterable<TSource>} source Source sequence
 * @param {function(error: any): Iterable<TSource>} handler Handler to invoke when an exception of the specified type occurs.
 * @return {Iterable<TSource>} Source sequence, concatenated with an exception handler result sequence in case of an error.
 */
export declare function catchWith<TSource>(source: Iterable<TSource>, handler: (error: any) => Iterable<TSource>): IterableX<TSource>;
