import { IterableX } from './iterablex';
export declare class FlatMapIterable<TSource, TResult> extends IterableX<TResult> {
    private _source;
    private _fn;
    constructor(source: Iterable<TSource>, fn: (value: TSource) => Iterable<TResult>);
    [Symbol.iterator](): IterableIterator<TResult>;
}
/**
 * Projects each element of a sequence to iterable and flattens the resulting sequences into
 * one sequence.
 * @param {Iterable<T>} source Source sequence
 * @param {function:(value: T): Iterable<R>} selector A transform function to apply to each element.
 * @param {Object} [thisArg] An optional "this" binding for the selector function.
 * @returns {Iterable<R>} An iterable whose elements are the result of invoking the one-to-many
 * transform function on each element of the input sequence.
 */
export declare function flatMap<TSource, TResult>(source: Iterable<TSource>, selector: (value: TSource) => Iterable<TResult>, thisArg?: any): IterableX<TResult>;
