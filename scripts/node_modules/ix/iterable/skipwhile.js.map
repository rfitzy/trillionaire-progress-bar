{"version":3,"sources":["iterable/skipwhile.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AAExC,MAAa,iBAA2B,SAAQ,qBAAkB;IAIhE,YAAY,MAAyB,EAAE,SAAqD;QAC1F,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,QAAQ,GAAG,KAAK,EAClB,CAAC,GAAG,CAAC,CAAC;QACR,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;YAChC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE;gBAC/C,QAAQ,GAAG,IAAI,CAAC;aACjB;YACD,IAAI,QAAQ,EAAE;gBACZ,MAAM,OAAO,CAAC;aACf;SACF;IACH,CAAC;CACF;AAtBD,8CAsBC;AAUD,SAAgB,SAAS,CACvB,MAAyB,EACzB,SAAqD;IAErD,OAAO,IAAI,iBAAiB,CAAU,MAAM,EAAE,SAAS,CAAC,CAAC;AAC3D,CAAC;AALD,8BAKC","file":"skipwhile.js","sourcesContent":["import { IterableX } from './iterablex';\n\nexport class SkipWhileIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _predicate: (value: TSource, index: number) => boolean;\n\n  constructor(source: Iterable<TSource>, predicate: (value: TSource, index: number) => boolean) {\n    super();\n    this._source = source;\n    this._predicate = predicate;\n  }\n\n  *[Symbol.iterator]() {\n    let yielding = false,\n      i = 0;\n    for (let element of this._source) {\n      if (!yielding && !this._predicate(element, i++)) {\n        yielding = true;\n      }\n      if (yielding) {\n        yield element;\n      }\n    }\n  }\n}\n\nexport function skipWhile<T, S extends T>(\n  source: Iterable<T>,\n  predicate: (value: T, index: number) => value is S\n): IterableX<S>;\nexport function skipWhile<TSource>(\n  source: Iterable<TSource>,\n  predicate: (value: TSource, index: number) => boolean\n): IterableX<TSource>;\nexport function skipWhile<TSource>(\n  source: Iterable<TSource>,\n  predicate: (value: TSource, index: number) => boolean\n): IterableX<TSource> {\n  return new SkipWhileIterable<TSource>(source, predicate);\n}\n"]}