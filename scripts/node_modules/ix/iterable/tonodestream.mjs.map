{"version":3,"sources":["iterable/tonodestream.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAmB,MAAM,QAAQ,CAAC;AAEnD,MAAM,IAAI,GAAG,CAAC,CAAM,EAAE,EAAE,CAAC,IAAW,CAAC;AAErC,MAAM,OAAO,gBAAoB,SAAQ,QAAQ;IAI/C,YAAY,MAAmB,EAAE,OAAyB;QACxD,KAAK,CAAC,OAAO,CAAC,CAAC;QAJT,aAAQ,GAAY,KAAK,CAAC;QAC1B,gBAAW,GAAY,IAAI,CAAC;QAIlC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;IACtD,CAAC;IACM,KAAK,CAAC,IAAY;QACvB,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAC1B,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE;YAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SACtC;IACH,CAAC;IACM,QAAQ,CAAC,GAAiB,EAAE,EAA+B;QAChE,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,MAAM,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC;QACxD,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QACjB,IAAI,EAAE,EAAE;YACN,EAAE,CAAC,IAAI,CAAC,CAAC;SACV;IACH,CAAC;IACD,KAAK,CAAC,EAAe,EAAE,IAAY;QACjC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,IAAI,CAA6C,CAAC;QAClD,OAAO,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;YACjD,IAAI,IAAI,IAAI,IAAI,EAAE;gBAChB,IAAI,UAAU,EAAE;oBACd,IAAI,IAAI,CAAC,CAAC;iBACX;qBAAM;oBACL,IAAI,IAAI,MAAM,CAAC,UAAU,CAAa,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;iBACtD;aACF;YACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;gBACpC,MAAM;aACP;SACF;QACD,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACnC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChB,IAAI,EAAE,CAAC,MAAM,EAAE;gBACb,EAAE,CAAC,MAAM,EAAE,CAAC;aACb;SACF;QACD,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;IACxB,CAAC;CACF;AAWD,MAAM,UAAU,YAAY,CAC1B,MAAqB,EACrB,OAAyB;IAEzB,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,UAAU,KAAK,IAAI;QAC5C,CAAC,CAAC,IAAI,gBAAgB,CAAU,MAAM,EAAE,OAAO,CAAC;QAChD,CAAC,CAAC,IAAI,gBAAgB,CAA6C,MAAM,EAAE,OAAO,CAAC,CAAC;AACxF,CAAC","file":"tonodestream.js","sourcesContent":["import { BufferLike } from '../interfaces';\nimport { Readable, ReadableOptions } from 'stream';\n\nconst done = (_: any) => null as any;\n\nexport class IterableReadable<T> extends Readable {\n  private _pulling: boolean = false;\n  private _objectMode: boolean = true;\n  private _iterator: Iterator<T> | undefined;\n  constructor(source: Iterable<T>, options?: ReadableOptions) {\n    super(options);\n    this._iterator = source[Symbol.iterator]();\n    this._objectMode = !options || !!options.objectMode;\n  }\n  public _read(size: number) {\n    const it = this._iterator;\n    if (it && !this._pulling && (this._pulling = true)) {\n      this._pulling = this._pull(it, size);\n    }\n  }\n  public _destroy(err: Error | null, cb: (err: Error | null) => void) {\n    const it = this._iterator;\n    this._iterator = undefined;\n    const fn = (it && (err ? it.throw : it.return)) || done;\n    fn.call(it, err);\n    if (cb) {\n      cb(null);\n    }\n  }\n  _pull(it: Iterator<T>, size: number) {\n    const objectMode = this._objectMode;\n    let r: IteratorResult<BufferLike | T> | undefined;\n    while (this.readable && !(r = it.next(size)).done) {\n      if (size != null) {\n        if (objectMode) {\n          size -= 1;\n        } else {\n          size -= Buffer.byteLength(<BufferLike>r.value || '');\n        }\n      }\n      if (!this.push(r.value) || size <= 0) {\n        break;\n      }\n    }\n    if ((r && r.done) || !this.readable) {\n      this.push(null);\n      if (it.return) {\n        it.return();\n      }\n    }\n    return !this.readable;\n  }\n}\n\nexport function toNodeStream<TSource>(source: Iterable<TSource>): IterableReadable<TSource>;\nexport function toNodeStream<TSource>(\n  source: Iterable<TSource>,\n  options: ReadableOptions & { objectMode: true }\n): IterableReadable<TSource>;\nexport function toNodeStream<TSource extends BufferLike>(\n  source: Iterable<TSource>,\n  options: ReadableOptions & { objectMode: false }\n): IterableReadable<TSource>;\nexport function toNodeStream<TSource>(\n  source: Iterable<any>,\n  options?: ReadableOptions\n): IterableReadable<TSource> {\n  return !options || options.objectMode === true\n    ? new IterableReadable<TSource>(source, options)\n    : new IterableReadable<TSource extends BufferLike ? TSource : any>(source, options);\n}\n"]}