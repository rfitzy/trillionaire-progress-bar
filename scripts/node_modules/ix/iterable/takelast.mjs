import { IterableX } from './iterablex';
export class TakeLastIterable extends IterableX {
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    *[Symbol.iterator]() {
        if (this._count > 0) {
            let q = [];
            for (let item of this._source) {
                if (q.length >= this._count) {
                    q.shift();
                }
                q.push(item);
            }
            while (q.length > 0) {
                yield q.shift();
            }
        }
    }
}
export function takeLast(source, count) {
    return new TakeLastIterable(source, count);
}

//# sourceMappingURL=takelast.mjs.map
