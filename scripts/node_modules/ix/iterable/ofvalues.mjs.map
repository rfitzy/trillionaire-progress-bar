{"version":3,"sources":["iterable/ofvalues.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAE5B,MAAM,gBAA0B,SAAQ,SAAkB;IAGxD,YAAY,MAAkC;QAC5C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,CAAC,MAAM,CAAC,QAAQ,CAAC;QACf,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;IACrF,CAAC;CACF;AAED,MAAM,UAAU,QAAQ,CAAU,MAAkC;IAClE,OAAO,IAAI,gBAAgB,CAAU,MAAM,CAAC,CAAC;AAC/C,CAAC","file":"ofvalues.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { map } from './map';\n\nclass OfValuesIterable<TSource> extends IterableX<TSource> {\n  private _source: { [key: string]: TSource };\n\n  constructor(source: { [key: string]: TSource }) {\n    super();\n    this._source = source;\n  }\n\n  [Symbol.iterator]() {\n    return map(Object.keys(this._source), key => this._source[key])[Symbol.iterator]();\n  }\n}\n\nexport function ofValues<TSource>(source: { [key: string]: TSource }): IterableX<TSource> {\n  return new OfValuesIterable<TSource>(source);\n}\n"]}