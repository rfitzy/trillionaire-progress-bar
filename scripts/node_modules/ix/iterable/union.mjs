import { IterableX } from './iterablex';
import { arrayIndexOf } from '../internal/arrayindexof';
import { comparer as defaultComparer } from '../internal/comparer';
export class UnionIterable extends IterableX {
    constructor(left, right, comparer) {
        super();
        this._left = left;
        this._right = right;
        this._comparer = comparer;
    }
    *[Symbol.iterator]() {
        let map = [];
        for (let lItem of this._left) {
            if (arrayIndexOf(map, lItem, this._comparer) === -1) {
                map.push(lItem);
                yield lItem;
            }
        }
        for (let rItem of this._right) {
            if (arrayIndexOf(map, rItem, this._comparer) === -1) {
                map.push(rItem);
                yield rItem;
            }
        }
    }
}
export function union(left, right, comparer = defaultComparer) {
    return new UnionIterable(left, right, comparer);
}

//# sourceMappingURL=union.mjs.map
