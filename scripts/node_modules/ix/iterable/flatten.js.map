{"version":3,"sources":["iterable/flatten.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AACxC,uDAAoD;AAEpD,MAAa,eAAyB,SAAQ,qBAAkB;IAI9D,YAAY,MAAyB,EAAE,KAAa;QAClD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAEO,CAAC,QAAQ,CAAC,MAAyB,EAAE,KAAa;QACxD,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;gBACvB,MAAM,IAAI,CAAC;aACZ;YACD,OAAO,SAAS,CAAC;SAClB;QACD,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;YACvB,IAAI,uBAAU,CAAC,IAAI,CAAC,EAAE;gBACpB,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,EAAE;oBACpD,MAAM,SAAS,CAAC;iBACjB;aACF;iBAAM;gBACL,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;IAED,CAAC,MAAM,CAAC,QAAQ,CAAC;QACf,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;IACrE,CAAC;CACF;AA/BD,0CA+BC;AAED;;;;;GAKG;AACH,SAAgB,OAAO,CAAI,MAAmB,EAAE,QAAgB,QAAQ;IACtE,OAAO,IAAI,eAAe,CAAI,MAAM,EAAE,KAAK,CAAC,CAAC;AAC/C,CAAC;AAFD,0BAEC","file":"flatten.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { isIterable } from '../internal/isiterable';\n\nexport class FlattenIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _depth: number;\n\n  constructor(source: Iterable<TSource>, depth: number) {\n    super();\n    this._source = source;\n    this._depth = depth;\n  }\n\n  private *_flatten(source: Iterable<TSource>, depth: number): Iterable<TSource> {\n    if (depth === 0) {\n      for (let item of source) {\n        yield item;\n      }\n      return undefined;\n    }\n    for (let item of source) {\n      if (isIterable(item)) {\n        for (let innerItem of this._flatten(item, depth - 1)) {\n          yield innerItem;\n        }\n      } else {\n        yield item;\n      }\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this._flatten(this._source, this._depth)[Symbol.iterator]();\n  }\n}\n\n/**\n * Flattens the source sequence until the specified depth.\n * @param {Iterable<T>} source Source sequence.\n * @param {Number} depth The depth to flatten the source sequence.\n * @returns {Iterable<T>} The flattened sequence, flattened to the specified depth.\n */\nexport function flatten<T>(source: Iterable<T>, depth: number = Infinity): IterableX<T> {\n  return new FlattenIterable<T>(source, depth);\n}\n"]}