{"version":3,"sources":["iterable/intersect.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AACxC,2DAAwD;AACxD,mDAAmE;AAEnE,SAAS,WAAW,CAAI,KAAU,EAAE,IAAO,EAAE,QAAiC;IAC5E,IAAI,GAAG,GAAG,2BAAY,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC9C,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;QACd,OAAO,KAAK,CAAC;KACd;IACD,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACrB,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAa,iBAA2B,SAAQ,qBAAkB;IAKhE,YACE,KAAwB,EACxB,MAAyB,EACzB,QAA6C;QAE7C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,GAAG,GAAG,EAAe,CAAC;QAC1B,KAAK,IAAI,UAAU,IAAI,IAAI,CAAC,OAAO,EAAE;YACnC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACtB;QAED,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE;YACjC,IAAI,WAAW,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC/C,MAAM,SAAS,CAAC;aACjB;SACF;IACH,CAAC;CACF;AA5BD,8CA4BC;AAED,SAAgB,SAAS,CACvB,KAAwB,EACxB,MAAyB,EACzB,WAAgD,mBAAe;IAE/D,OAAO,IAAI,iBAAiB,CAAU,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;AACjE,CAAC;AAND,8BAMC","file":"intersect.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { arrayIndexOf } from '../internal/arrayindexof';\nimport { comparer as defaultComparer } from '../internal/comparer';\n\nfunction arrayRemove<T>(array: T[], item: T, comparer: (x: T, y: T) => boolean): boolean {\n  let idx = arrayIndexOf(array, item, comparer);\n  if (idx === -1) {\n    return false;\n  }\n  array.splice(idx, 1);\n  return true;\n}\n\nexport class IntersectIterable<TSource> extends IterableX<TSource> {\n  private _first: Iterable<TSource>;\n  private _second: Iterable<TSource>;\n  private _comparer: (x: TSource, y: TSource) => boolean;\n\n  constructor(\n    first: Iterable<TSource>,\n    second: Iterable<TSource>,\n    comparer: (x: TSource, y: TSource) => boolean\n  ) {\n    super();\n    this._first = first;\n    this._second = second;\n    this._comparer = comparer;\n  }\n\n  *[Symbol.iterator]() {\n    let map = [] as TSource[];\n    for (let secondItem of this._second) {\n      map.push(secondItem);\n    }\n\n    for (let firstItem of this._first) {\n      if (arrayRemove(map, firstItem, this._comparer)) {\n        yield firstItem;\n      }\n    }\n  }\n}\n\nexport function intersect<TSource>(\n  first: Iterable<TSource>,\n  second: Iterable<TSource>,\n  comparer: (x: TSource, y: TSource) => boolean = defaultComparer\n): IterableX<TSource> {\n  return new IntersectIterable<TSource>(first, second, comparer);\n}\n"]}