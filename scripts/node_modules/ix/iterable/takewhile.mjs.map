{"version":3,"sources":["iterable/takewhile.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,MAAM,OAAO,iBAA2B,SAAQ,SAAkB;IAIhE,YAAY,MAAyB,EAAE,SAAqD;QAC1F,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC7B,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE;gBAC/B,MAAM;aACP;YACD,MAAM,IAAI,CAAC;SACZ;IACH,CAAC;CACF;AAUD,MAAM,UAAU,SAAS,CACvB,MAAyB,EACzB,SAAqD;IAErD,OAAO,IAAI,iBAAiB,CAAU,MAAM,EAAE,SAAS,CAAC,CAAC;AAC3D,CAAC","file":"takewhile.js","sourcesContent":["import { IterableX } from './iterablex';\n\nexport class TakeWhileIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _predicate: (value: TSource, index: number) => boolean;\n\n  constructor(source: Iterable<TSource>, predicate: (value: TSource, index: number) => boolean) {\n    super();\n    this._source = source;\n    this._predicate = predicate;\n  }\n\n  *[Symbol.iterator]() {\n    let i = 0;\n    for (let item of this._source) {\n      if (!this._predicate(item, i++)) {\n        break;\n      }\n      yield item;\n    }\n  }\n}\n\nexport function takeWhile<T, S extends T>(\n  source: Iterable<T>,\n  predicate: (value: T, index: number) => value is S\n): IterableX<S>;\nexport function takeWhile<TSource>(\n  source: Iterable<TSource>,\n  predicate: (value: TSource, index: number) => boolean\n): IterableX<TSource>;\nexport function takeWhile<TSource>(\n  source: Iterable<TSource>,\n  predicate: (value: TSource, index: number) => boolean\n): IterableX<TSource> {\n  return new TakeWhileIterable<TSource>(source, predicate);\n}\n"]}