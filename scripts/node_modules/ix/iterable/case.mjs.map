{"version":3,"sources":["iterable/case.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,UAAU,KAAK,CACnB,QAAuB,EACvB,OAAwC,EACxC,gBAAmC,KAAK,EAAW;IAEnD,OAAO,KAAK,CAAU,GAAG,EAAE;QACzB,MAAM,GAAG,GAAG,QAAQ,EAAE,CAAC;QACvB,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC,aAAa,CAAC;IAC9D,CAAC,CAAC,CAAC;AACL,CAAC","file":"case.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { defer } from './defer';\nimport { empty } from './empty';\n\n/**\n * Returns a sequence from a dictionary based on the result of evaluating a selector function.\n * @example\n * const map = new Map([\n *   [1, [1, 2, 3]],\n *   [2, [2, 3, 4]],\n *   [3, [4, 5, 6]]\n * ]);\n * const result = case(\n *   () => 2,\n *   map,\n *   [5, 6, 7]\n * );\n * const result = Ix.Iterable.case(\n *   () => 2,\n *   map,\n *   [5, 6, 7]\n * );\n * for (const item of result) {\n *   console.log(result);\n * }\n * @param {function(): TSource} selector Selector function used to pick a sequence from the given sources.\n * @param {Map<TSource, Iterable<TResult>>} sources Dictionary mapping selector values onto resulting sequences.\n * @param {Iterable<TResult>} [defaultSource] Default sequence to return in case there's no corresponding source\n * for the computed selector value.  If not specified, defaults to an empty sequence.\n * @return {Iterable<TResult>} The source sequence corresponding with the evaluated selector value; otherwise, the default source.\n */\nexport function _case<TSource, TResult>(\n  selector: () => TSource,\n  sources: Map<TSource, Iterable<TResult>>,\n  defaultSource: Iterable<TResult> = empty<TResult>()\n): IterableX<TResult> {\n  return defer<TResult>(() => {\n    const key = selector();\n    return sources.has(key) ? sources.get(key)! : defaultSource;\n  });\n}\n"]}