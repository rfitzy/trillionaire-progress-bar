{"version":3,"sources":["iterable/except.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AACxC,2DAAwD;AACxD,mDAAmE;AAEnE,MAAa,cAAwB,SAAQ,qBAAkB;IAK7D,YACE,KAAwB,EACxB,MAAyB,EACzB,QAA6C;QAE7C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,GAAG,GAAG,EAAe,CAAC;QAC1B,KAAK,IAAI,UAAU,IAAI,IAAI,CAAC,OAAO,EAAE;YACnC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACtB;QAED,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE;YACjC,IAAI,2BAAY,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;gBACvD,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACpB,MAAM,SAAS,CAAC;aACjB;SACF;IACH,CAAC;CACF;AA7BD,wCA6BC;AAED;;;;;;;GAOG;AACH,SAAgB,MAAM,CACpB,KAAwB,EACxB,MAAyB,EACzB,WAAgD,mBAAe;IAE/D,OAAO,IAAI,cAAc,CAAU,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC9D,CAAC;AAND,wBAMC","file":"except.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { arrayIndexOf } from '../internal/arrayindexof';\nimport { comparer as defaultComparer } from '../internal/comparer';\n\nexport class ExceptIterable<TSource> extends IterableX<TSource> {\n  private _first: Iterable<TSource>;\n  private _second: Iterable<TSource>;\n  private _comparer: (x: TSource, y: TSource) => boolean;\n\n  constructor(\n    first: Iterable<TSource>,\n    second: Iterable<TSource>,\n    comparer: (x: TSource, y: TSource) => boolean\n  ) {\n    super();\n    this._first = first;\n    this._second = second;\n    this._comparer = comparer;\n  }\n\n  *[Symbol.iterator]() {\n    let map = [] as TSource[];\n    for (let secondItem of this._second) {\n      map.push(secondItem);\n    }\n\n    for (let firstItem of this._first) {\n      if (arrayIndexOf(map, firstItem, this._comparer) === -1) {\n        map.push(firstItem);\n        yield firstItem;\n      }\n    }\n  }\n}\n\n/**\n * Produces the set difference of two sequences by using the an equality comparer to compare values.\n * @param {Iterable<T>} first A sequence whose elements that are not also in second will be returned.\n * @param {Iterable<T>} second A sequence whose elements that also occur in the first sequence will cause those\n * elements to be removed from the returned sequence.\n * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.\n * @return {Iterable<T>} A sequence that contains the set difference of the elements of two sequences.\n */\nexport function except<TSource>(\n  first: Iterable<TSource>,\n  second: Iterable<TSource>,\n  comparer: (x: TSource, y: TSource) => boolean = defaultComparer\n): IterableX<TSource> {\n  return new ExceptIterable<TSource>(first, second, comparer);\n}\n"]}