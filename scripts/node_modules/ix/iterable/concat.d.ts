import { IterableX } from './iterablex';
export declare class ConcatIterable<TSource> extends IterableX<TSource> {
    private _source;
    constructor(source: Iterable<Iterable<TSource>>);
    [Symbol.iterator](): IterableIterator<TSource>;
}
export declare function concat<T>(source: Iterable<T>): IterableX<T>;
export declare function concat<T, T2>(source: Iterable<T>, v2: Iterable<T2>): IterableX<T | T2>;
export declare function concat<T, T2, T3>(source: Iterable<T>, v2: Iterable<T2>, v3: Iterable<T3>): IterableX<T | T2 | T3>;
export declare function concat<T, T2, T3, T4>(source: Iterable<T>, v2: Iterable<T2>, v3: Iterable<T3>, v4: Iterable<T4>): IterableX<T | T2 | T3 | T4>;
export declare function concat<T, T2, T3, T4, T5>(source: Iterable<T>, v2: Iterable<T2>, v3: Iterable<T3>, v4: Iterable<T4>, v5: Iterable<T5>): Iterable<T | T2 | T3 | T4 | T5>;
export declare function concat<T, T2, T3, T4, T5, T6>(source: Iterable<T>, v2: Iterable<T2>, v3: Iterable<T3>, v4: Iterable<T4>, v5: Iterable<T5>, v6: Iterable<T6>): Iterable<T | T2 | T3 | T4 | T5 | T6>;
export declare function concat<T>(source: Iterable<T>, ...args: Iterable<T>[]): IterableX<T>;
export declare function concatStatic<T>(v1: Iterable<T>): IterableX<T>;
export declare function concatStatic<T, T2>(v1: Iterable<T>, v2: Iterable<T2>): IterableX<T | T2>;
export declare function concatStatic<T, T2, T3>(v1: Iterable<T>, v2: Iterable<T2>, v3: Iterable<T3>): IterableX<T | T2 | T3>;
export declare function concatStatic<T, T2, T3, T4>(v1: Iterable<T>, v2: Iterable<T2>, v3: Iterable<T3>, v4: Iterable<T4>): IterableX<T | T2 | T3 | T4>;
export declare function concatStatic<T, T2, T3, T4, T5>(v1: Iterable<T>, v2: Iterable<T2>, v3: Iterable<T3>, v4: Iterable<T4>, v5: Iterable<T5>): Iterable<T | T2 | T3 | T4 | T5>;
export declare function concatStatic<T, T2, T3, T4, T5, T6>(v1: Iterable<T>, v2: Iterable<T2>, v3: Iterable<T3>, v4: Iterable<T4>, v5: Iterable<T5>, v6: Iterable<T6>): Iterable<T | T2 | T3 | T4 | T5 | T6>;
