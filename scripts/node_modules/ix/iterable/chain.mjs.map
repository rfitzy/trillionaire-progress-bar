{"version":3,"sources":["iterable/chain.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,MAAM,aAAuB,SAAQ,SAAkB;IAGrD,YAAY,MAAyB;QACnC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,CAAC,MAAM,CAAC,QAAQ,CAAC;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;IACzC,CAAC;CACF;AAED;;;;;;;;;GASG;AACH,MAAM,UAAU,KAAK,CACnB,MAAyB,EACzB,QAA0D;IAE1D,OAAO,IAAI,aAAa,CAAU,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;AACtD,CAAC","file":"chain.js","sourcesContent":["import { IterableX } from './iterablex';\n\nclass ChainIterable<TResult> extends IterableX<TResult> {\n  private _result: Iterable<TResult>;\n\n  constructor(result: Iterable<TResult>) {\n    super();\n    this._result = result;\n  }\n\n  [Symbol.iterator]() {\n    return this._result[Symbol.iterator]();\n  }\n}\n\n/**\n * Returns an iterable sequence that is the result of invoking the selector on the source sequence,\n * without sharing subscriptions.  This operator allows for a fluent style of writing queries that use\n * the same sequence multiple times.\n * @param {Iterable<TSource>} source Source sequence that will be shared in the selector function.\n * @param {function(source: Iterable<TSource>): Iterable<TResult>} selector Selector function which can use\n * the source sequence as many times as needed, without sharing subscriptions to the source sequence.\n * @returns An iterable sequence that contains the elements of a sequence produced by multicasting the source\n * sequence within a selector function.\n */\nexport function chain<TSource, TResult>(\n  source: Iterable<TSource>,\n  selector: (source: Iterable<TSource>) => Iterable<TResult>\n): IterableX<TResult> {\n  return new ChainIterable<TResult>(selector(source));\n}\n"]}