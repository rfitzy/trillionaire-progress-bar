"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const defer_1 = require("./defer");
const empty_1 = require("./empty");
/**
 * Returns a sequence from a dictionary based on the result of evaluating a selector function.
 * @example
 * const map = new Map([
 *   [1, [1, 2, 3]],
 *   [2, [2, 3, 4]],
 *   [3, [4, 5, 6]]
 * ]);
 * const result = case(
 *   () => 2,
 *   map,
 *   [5, 6, 7]
 * );
 * const result = Ix.Iterable.case(
 *   () => 2,
 *   map,
 *   [5, 6, 7]
 * );
 * for (const item of result) {
 *   console.log(result);
 * }
 * @param {function(): TSource} selector Selector function used to pick a sequence from the given sources.
 * @param {Map<TSource, Iterable<TResult>>} sources Dictionary mapping selector values onto resulting sequences.
 * @param {Iterable<TResult>} [defaultSource] Default sequence to return in case there's no corresponding source
 * for the computed selector value.  If not specified, defaults to an empty sequence.
 * @return {Iterable<TResult>} The source sequence corresponding with the evaluated selector value; otherwise, the default source.
 */
function _case(selector, sources, defaultSource = empty_1.empty()) {
    return defer_1.defer(() => {
        const key = selector();
        return sources.has(key) ? sources.get(key) : defaultSource;
    });
}
exports._case = _case;

//# sourceMappingURL=case.js.map
