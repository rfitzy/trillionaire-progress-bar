{"version":3,"sources":["iterable/flatmap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD,MAAM,OAAO,eAAkC,SAAQ,SAAkB;IAIvE,YAAY,MAAyB,EAAE,EAAyC;QAC9E,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAChB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,EAAE;YAClC,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBACzC,MAAM,SAAS,CAAC;aACjB;SACF;IACH,CAAC;CACF;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,OAAO,CACrB,MAAyB,EACzB,QAA+C,EAC/C,OAAa;IAEb,OAAO,IAAI,eAAe,CAAmB,MAAM,EAAE,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3F,CAAC","file":"flatmap.js","sourcesContent":["import { IterableX } from './iterablex';\nimport { bindCallback } from '../internal/bindcallback';\n\nexport class FlatMapIterable<TSource, TResult> extends IterableX<TResult> {\n  private _source: Iterable<TSource>;\n  private _fn: (value: TSource) => Iterable<TResult>;\n\n  constructor(source: Iterable<TSource>, fn: (value: TSource) => Iterable<TResult>) {\n    super();\n    this._source = source;\n    this._fn = fn;\n  }\n\n  *[Symbol.iterator]() {\n    for (let outerItem of this._source) {\n      for (let innerItem of this._fn(outerItem)) {\n        yield innerItem;\n      }\n    }\n  }\n}\n\n/**\n * Projects each element of a sequence to iterable and flattens the resulting sequences into\n * one sequence.\n * @param {Iterable<T>} source Source sequence\n * @param {function:(value: T): Iterable<R>} selector A transform function to apply to each element.\n * @param {Object} [thisArg] An optional \"this\" binding for the selector function.\n * @returns {Iterable<R>} An iterable whose elements are the result of invoking the one-to-many\n * transform function on each element of the input sequence.\n */\nexport function flatMap<TSource, TResult>(\n  source: Iterable<TSource>,\n  selector: (value: TSource) => Iterable<TResult>,\n  thisArg?: any\n): IterableX<TResult> {\n  return new FlatMapIterable<TSource, TResult>(source, bindCallback(selector, thisArg, 1));\n}\n"]}